{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Arista ATD documentation!","text":""},{"location":"#eos-configuration","title":"EOS Configuration","text":"<ul> <li>Connecting</li> <li>Layer 2 Leaf-Spine</li> <li>Layer 3 Leaf-Spine</li> <li>VxLAN</li> <li>L2 EVPN Services</li> </ul>"},{"location":"#cloudvision-portal","title":"CloudVision Portal","text":"<ul> <li>CVP Configlet, Change Control, and Rollback</li> </ul>"},{"location":"#programmability","title":"Programmability","text":"<ul> <li>Connecting to your lab machine</li> </ul>"},{"location":"#broadcaster-training","title":"Broadcaster Training","text":"<ul> <li>Media Intro to IP Lab</li> </ul>"},{"location":"#troubleshooting-training","title":"Troubleshooting Training","text":"<ul> <li>Troubleshooting Introduction</li> </ul>"},{"location":"#arista-graduate","title":"Arista Graduate","text":"<ul> <li>CloudVision Initial Configuration</li> </ul>"},{"location":"arista_graduate/ag_initial_configuration/","title":"CloudVision Initial Configuration","text":"<p>:::: note ::: title Note :::</p> <p>This must be deployed as a cEOS topology with the CVP version set to CVP-2022.2.0-bare ::::</p> <ol> <li> <p>Log into the Arista Test Drive Portal by using SSH</p> <pre><code>ssh arista@{unique_address}.topo.testdrive.arista.com\n</code></pre> </li> </ol> <p>or by clicking on \\\"Console Access\\\" on the main ATD screen. Log in with the arista user and the auto-generated password</p> <p>::: thumbnail ../images/aa-initial_configuration/initial-config-1.png :::</p> <p>| </p> <ol> <li>Once you\\'re on the Jump host, select option 98. SSH to     Devices(SSH)</li> </ol> <p>| </p> <ol> <li>Next, select 95. Connect to CVP Console (console). This will     take you to the bash prompt for our jump host</li> </ol> <p>| </p> <ol> <li>Since CVP is not configured and doesn\\'t have an IP yet, we cannot     SSH to it. Instead we need to create a Console connection to the VM     by using the command console cvp1 at the virsh # prompt</li> </ol> <p>| </p> <pre><code>==========Device SSH Menu==========\n\nScreen Instructions:\n\n* Select specific screen - Ctrl + a &lt;number&gt;\n* Select previous screen - Ctrl + a p\n* Select next screen - Ctrl + a n\n* Exit all screens (return to menu) - Ctrl + a \\\n\nPlease select from the following options:\n1. s1-brdr1 (s1-brdr1)\n2. s1-brdr2 (s1-brdr2)\n3. s1-core1 (s1-core1)\n4. s1-core2 (s1-core2)\n5. s1-host1 (s1-host1)\n6. s1-host2 (s1-host2)\n7. s1-leaf1 (s1-leaf1)\n8. s1-leaf2 (s1-leaf2)\n9. s1-leaf3 (s1-leaf3)\n10. s1-leaf4 (s1-leaf4)\n11. s1-spine1 (s1-spine1)\n12. s1-spine2 (s1-spine2)\n13. s2-brdr1 (s2-brdr1)\n14. s2-brdr2 (s2-brdr2)\n15. s2-core1 (s2-core1)\n16. s2-core2 (s2-core2)\n17. s2-host1 (s2-host1)\n18. s2-host2 (s2-host2)\n19. s2-leaf1 (s2-leaf1)\n20. s2-leaf2 (s2-leaf2)\n21. s2-leaf3 (s2-leaf3)\n22. s2-leaf4 (s2-leaf4)\n23. s2-spine1 (s2-spine1)\n24. s2-spine2 (s2-spine2)\n\nOther Options: \n95. Connect to CVP Console (console) - Type 'console cvp1' after connecting\n96. Screen (screen) - Opens a screen session to each of the hosts\n97. Back to Previous Menu (back)\n98. Shell (shell/bash)\n99. Back to Main Menu (main/exit) - CTRL + c\n\nWhat would you like to do? 95\n=============================================\nTo connect to the CVP Console perform the following below:\n1. Enter the arista users password of: **uniquepassword**\n2. Once prompted with the 'virsh' prompt. Enter 'console cvp1'\n=============================================\nsetlocale: No such file or directory\nThe authenticity of host '10.128.0.64 (10.128.0.64)' can't be established.\nECDSA key fingerprint is SHA256:6tG42X0yPktTfl8bxhNjGUWO4f8qc7iU9WgaFMTJKRA.\nAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\narista@10.128.0.64's password: \nWelcome to virsh, the virtualization interactive terminal.\n\nType:  'help' for help with commands\n    'quit' to quit\n\nvirsh # console cvp1\nConnected to domain 'cvp1'\nEscape character is ^] (Ctrl + ])\n</code></pre> <p>You should now see the localhost login: prompt.</p> <p>| </p> <ol> <li> <p>Log in using cvpadmin as the username. You will then be asked to     set a password.</p> <pre><code>localhost login: cvpadmin\nChanging password for user root.\nNew password: \nRetype new password: \npasswd: all authentication tokens updated successfully.\n\nCVP Installation Menu\n\n[q]uit [p]rint [s]inglenode [m]ultinode [r]eplace [u]pgrade\n&gt;\n</code></pre> </li> </ol> <p>| </p> <ol> <li>Since we are only setting up one CVP server, select s to choose     singlenode</li> </ol> <p>| </p> <ol> <li>You will now fill in the network settings for your CVP installation.     Please enter the following into the fields.</li> </ol> <p>| </p> <p>:::: note ::: title Note :::</p> <p>CloudVision Deployment Model: - This is to select whether you would like a default deployment or if you would only like to install wifi-analytics. For this lab, we will select d for default</p> <p>DNS Server Addresses (IPv4 Only): - comma-separated list of DNS servers. 192.168.0.1 will be acting as our DNS Server, NTP Server, and Default Gateway in our lab. 192.168.0.1 is the IP of our lab jump host that we used to access the CVP VM.</p> <p>DNS Domain Search List: comma-separated list of DNS domains on your network. We will set this to atd.lab</p> <p>Number of NTP Servers: - Allows you to specify how many NTP servers you have in your environment. We set this to 1 for this lab</p> <p>NTP Server Address: - comma separated list of NTP servers. enter 192.168.0.1 for this lab</p> <p>Is Auth enabled for NTP Server #1: - allows you to optionally set authentication parameters for NTP servers in your environment. We do not use authentication, so we will keep the default n value</p> <p>Cluster Interface Name: - Allows you to specify a cluster interface name, This is typically left as the default value</p> <p>Device Interface Name: - Allows you to specify a device interface name, This is typically also left as the default value</p> <p>CloudVision WiFi Enabled: - This should be enabled if you are deploying Access Points in your environment. For our lab scenario, we will select the default value N</p> <p>Enter a private IP range for the internal cluster network (overlay): This is the private IP range used for the kubernetes cluster network. This value must be unique; must be /20 or larger; shouldn\\'t be link-local, reserved or multicast. Default value is 10.42.0.0/16. We will accept this default for our lab.</p> <p>| </p> <p>Hostname (FQDN): - This will be the URL you enter to access CloudVision once the deployment is complete. We will set this to cvp.atd.lab for this lab</p> <p>IP Address of eth0: - This will be the IP address of this node. We set this to 192.168.0.5 in this lab</p> <p>Netmask of eth0: - Our example will be a /24, so we set this to 255.255.255.0</p> <p>NAT IP Address of eth0: - This would be set if you are using NAT to access CVP. For the purposes of this lab, we will leave this blank</p> <p>Default Gateway: - Set this to 192.168.0.1 (our lab jump host)</p> <p>Number of Static Routes: - Leave blank</p> <p>TACACS Server IP Address: - Leave blank ::::</p> <pre><code>CVP Installation Menu\n\n[q]uit [p]rint [s]inglenode [m]ultinode [r]eplace [u]pgrade\n&gt;s\n\nEnter the configuration for CloudVision Portal and apply it when done.\nEntries marked with '*' are required.\n\n\nCommon Configuration:\n\nCloudVision Deployment Model [d]efault [w]ifi_analytics: d\nDNS Server Addresses (IPv4 Only): 192.168.0.1\nDNS Domain Search List: atd.lab\nNumber of NTP Servers: 1\nNTP Server Address (IPv4 or FQDN) #1: 192.168.0.1\nIs Auth enabled for NTP Server #1: n\nCluster Interface Name: eth0\nDevice Interface Name: eth0\nCloudVision WiFi Enabled: no\n*Enter a private IP range for the internal cluster network (overlay): 10.42.0.0\n/16\n*Fips mode: no\n\nNode Configuration:\n\n*Hostname (FQDN): cvp.atd.lab\n*IP Address of eth0: 192.168.0.5\n*Netmask of eth0: 255.255.255.0\nNAT IP Address of eth0: \n*Default Gateway: 192.168.0.1\nNumber of Static Routes: \nTACACS Server IP Address: \n</code></pre> <p>| </p> <p>:::: note ::: title Note :::</p> <p>There may be options listed on your deployment that do not exist in this guide. If you encounter this, just accept the default value for that field.</p> <p>All of these settings are saved in the /cvpi/cvp-config.yaml file ::::</p> <p>| </p> <ol> <li>You can now select p to view the output of the     /cvpi/cvp-config.yaml file. Then select v to verify the     configuration. Your output should look similar to this:</li> </ol> <p>| </p> <pre><code>Singlenode Configuration Menu\n\n[q]uit [p]rint [e]dit [v]erify [s]ave [a]pply [h]elp ve[r]bose\n&gt;p\ncommon:\ncluster_interface: eth0\ncv_wifi_enabled: 'no'\ndeployment_model: DEFAULT\ndevice_interface: eth0\ndns:\n- 192.168.0.1\ndns_domains:\n- atd.lab\nfips_mode: 'no'\nkube_cluster_network: 10.42.0.0/16\nmode: singlenode\nntp_servers:\n- auth: n\nserver: 192.168.0.1\nnum_ntp_servers: '1'\nnode1:\ndefault_route: 192.168.0.1\nhostname: cvp.atd.lab\ninterfaces:\neth0:\nip_address: 192.168.0.5\nnetmask: 255.255.255.0\nversion: 2\n\nSinglenode Configuration Menu\n\n[q]uit [p]rint [e]dit [v]erify [s]ave [a]pply [h]elp ve[r]bose\n&gt;v\nValid config format.\nApplying proposed config for network verification.\nsaved config to /cvpi/cvp-config.yaml\nRunning : cvpConfig.py tool...\nStopping: network\nRunning : /bin/sudo /bin/systemctl stop network\nRunning : /bin/sudo /bin/systemctl is-active network\nStarting: network\nRunning : /bin/sudo /bin/systemctl start network\n[ 4489.294334] warning: `/bin/ping' has both setuid-root and effective capabilities. Therefore not raising all capabilities.\nValid config.\n</code></pre> <p>| </p> <ol> <li>Finally, enter a to apply the changes and begin CVP     installation.</li> </ol> <p>| </p> <ol> <li>You should now see the installation running and a lot of scrolling     text. This should take about 10 minutes to complete. You know it\\'s     close to complete when flannelbr0 shows up.</li> </ol> <p>| </p> <ol> <li>When you see the configuration menu on the screen again, we know     that CVP has been configured successfully. Go back to the main ATD     screen and click on the CVP link.</li> </ol> <p>::: {.thumbnail width=\"50%\"} ../images/aa-initial_configuration/initial-config-3.png :::</p> <p>| </p> <ol> <li>On the login screen, use cvpadmin as the username and     cvpadmin as the password</li> </ol> <p>| </p> <ol> <li>You will need to change this password at first login, and you will     also be asked for an email address. You can put anything you want in     this field. Give your cluster a name and Logo on step 3, then click     Finish.</li> </ol> <p>::: {.thumbnail width=\"80%\"} ../images/aa-initial_configuration/initial-config-4.png :::</p> <p>| </p> <ol> <li>Log into CVP one more time and you\\'ll be greeted by the Devices     screen. You have now installed and configured CVP Successfully!</li> </ol> <p>| </p> <ol> <li>Now lets set up network-admin and network-operator accounts. Click     on the gear in the upper right. Select Users under Access     Control. Fill out the Add User screen and under Roles Select     network-admin. Click Add. Follow this step again, but select     network operator to set up the network-operator account.</li> </ol> <p>::: {.thumbnail width=\"70%\"} ../images/aa-initial_configuration/initial-config-5.png :::</p> <p>| </p> <ol> <li>Bonus Step - (Requires an Arista.com account) We can now subscribe     to bug alerts, so that CVP will populate compliance data     automatically on the Compliance Overview screen.</li> <li>Browse to arista.com and log in. Once logged in, click on your     name on the top bar and select My Profile. Copy your Access     Token listed at the bottom of the page.</li> <li>Back in CVP, click on the Gear icon in the top right, then select     Compliance Updates on the left. Paste the Token that was copied     from arista.com and click Save</li> </ol> <p>::: thumbnail ../images/aa-initial_configuration/initial-config-6.png :::</p> <p>| </p> <p>:::: warning ::: title Warning :::</p> <p>This step will error in the ATD environment, but on a standard deployment, where the CVP server can reach the internet, it will complete successfully. ::::</p> <p>The manual way of updating the bug database is to browse to Arista.com, click on Support &gt; Software Downloads and browse to CloudVision &gt; CloudVision Portal &gt; Bug Alerts and download the AlertBase-CVP.json file (as seen in the screenshot below)</p> <p>::: thumbnail ../images/aa-initial_configuration/initial-config-7.png :::</p> <p>:::: note ::: title Note :::</p> <p>Arista recommends a multinode setup (3 node) for on-prem deployments. For this lab, however, we deployed a singlenode installation to preserve cloud resources. A multinode install is exactly the same as the singlenode setup, you would just repeat the same steps for the secondary and tertiary nodes. ::::</p>"},{"location":"broadcaster_training/media_ip_intro/","title":"Media Intro to IP Lab","text":"<p>:::: note ::: title Note :::</p> <p>An IP address serves two principal functions. It identifies the host, or more specifically its network interface, and it provides the location of the host in the network, and thus the capability of establishing a path to that host. Its role has been characterized as follows: \\\"A name indicates what we seek. An address indicates where it is. A route indicates how to get there.\\\" ::::</p> <p>:::: note ::: title Note :::</p> <p>This lab has been limited to the following devices s1-Leaf 1, s1-Leaf 4, s1-Spine 1, s1-Spine 2, s1-Host 1 and s1-Host 2. Additional devices on this topology are out of scope for this lab. ::::</p> <ol> <li>Log into the LabAccess jumpserver:<ol> <li>Type <code>labs</code> at the Main Menu prompt. This will bring up     additional lab menu selections.</li> <li>Type <code>media-labs</code> at this prompt to open the media lab section.</li> <li>Type <code>media-intro</code> at this prompt and wait for the process to     run.</li> <li>The script will configure the topology with the exception of     s1-Leaf 4. The main task is to configure this device so     there is connectivity between the two hosts</li> </ol> </li> <li>Connect to s1-Leaf 4 from the menu:<ol> <li>Connect to <code>s1-Leaf 4</code> by selecting option <code>10</code> from the     <code>Device SSH</code> menu (Type <code>ssh</code> at the prompt). Once in the switch     we are in the Privileged EXEC mode, denoted by the #     preceding the device name. This is similar to a admin user, in     this mode can configure and view information on the switch. To     configure devices we will need to go into the global     configuration mode by typing configure at the prompt, this     will bring you into Privileged EXEC (enable) mode. As you do     the labs you will see this configure command being used to     ensure that you are in the config mode. One prompt that you     may come across is the &gt; this denotes that you are in EXEC     mode, in this mode you can do basic tests and view system     information. EXEC mode is the default mode for all switches.</li> </ol> </li> <li>Configure the proper ip address on the interfaces along with the     appropriate static routes to ensure there is end-to-end connectivity     for the two end hosts to reach each other. All interfaces in this     lab are designed as point-to-point connections</li> </ol> <ol> <li> <p>On s1-Leaf 4 assign the appropriate ip address and ensure the     adjacent devices can be reached</p> <pre><code>configure\n!\ninterface Ethernet 3\n    no switchport\n    ip address 10.127.34.4/24\n!\ninterface Ethernet 4\n    no switchport\n    ip address 172.16.46.4/24\n</code></pre> <p>Example:</p> <pre><code>s1-leaf4#configure\ns1-leaf4(config)#interface ethernet 3\ns1-leaf4(config-if-Et3)#no switchport\ns1-leaf4(config-if-Et3)#ip address 10.127.34.4/24\ns1-leaf4(config-if-Et3)#interface ethernet 4\ns1-leaf4(config-if-Et4)#no switchport\ns1-leaf4(config-if-Et4)#ip address 172.16.46.4/24\n</code></pre> <p>:::: note ::: title Note :::</p> <p>It is worth mentioning by default all interfaces on an Arista switch is set to be a switchport (Layer 2 interface). We need to allow it to be a routed interface and thus <code>no switchport</code> is added (turns into Layer 3 interface). Once the IP address has been added to the appropriate interface, ensure reachability to the adjacent device by leveraging the <code>ping</code> command on s1-Leaf 4 ::::</p> </li> </ol> <ol> <li> <p>Test Connect to s1-Spine2 and to s1-Host2</p> <p>:   <code>text     ping 10.127.34.3     ping 172.16.46.6</code></p> </li> </ol> <p>Example:</p> <pre><code>s1-leaf4# ping 10.127.34.3\nPING 10.127.34.3 (10.127.34.3) 72(100) bytes of data.\n80 bytes from 10.127.34.3: icmp_seq=1 ttl=64 time=17.0 ms\n80 bytes from 10.127.34.3: icmp_seq=2 ttl=64 time=18.8 ms\n80 bytes from 10.127.34.3: icmp_seq=3 ttl=64 time=14.9 ms\n80 bytes from 10.127.34.3: icmp_seq=4 ttl=64 time=12.6 ms\n\n--- 10.127.34.3 ping statistics ---\n5 packets transmitted, 4 received, 20% packet loss, time 62ms\nrtt min/avg/max/mdev = 12.605/15.868/18.844/2.332 ms, pipe 2, ipg/ewma 15.602/16.435 ms\n\ns1-leaf4# ping 172.16.46.6\nPING 172.16.46.6 (172.16.46.6) 72(100) bytes of data.\n80 bytes from 172.16.46.6: icmp_seq=1 ttl=64 time=38.4 ms\n80 bytes from 172.16.46.6: icmp_seq=2 ttl=64 time=32.1 ms\n80 bytes from 172.16.46.6: icmp_seq=3 ttl=64 time=28.0 ms\n80 bytes from 172.16.46.6: icmp_seq=4 ttl=64 time=31.6 ms\n80 bytes from 172.16.46.6: icmp_seq=5 ttl=64 time=12.7 ms\n\n--- 172.16.46.6 ping statistics ---\n5 packets transmitted, 5 received, 0% packet loss, time 68ms\nrtt min/avg/max/mdev = 12.797/28.603/38.419/8.584 ms, pipe 4, ipg/ewma 17.163/32.954 ms\n</code></pre> <p>At this point if the adjacent devices can be reached, you have configured the IP address correctly</p> <ol> <li> <p>Once the address has been assigned to the appropriate interfaces,     we can enable the routing as well as add the appropriate static     routes on s1-Leaf 4 to allow reachability between the two host     end-points.</p> <pre><code>configure\n!\nip routing\n!\nip route 172.16.15.0/24 10.127.34.3\n!\n</code></pre> <p>Example:</p> <pre><code>s1-leaf4(config-if-Et4)#configure\ns1-leaf4(config)#ip routing\ns1-leaf4(config)#ip route 172.16.15.0/24 10.127.34.3\n</code></pre> <p>:::: note ::: title Note :::</p> <p>We added the entire prefix for the static route but we could have also put the specific host address. Normally your internal security policies will dictate which approach to take ::::</p> </li> </ol> <ol> <li>Validate end-to-end connectivity from the hosts once IP addresses     and static routes have been configured from the previous steps<ol> <li> <p>Log into s1-Host 2 and verify there is reachability to     s1-Host 1</p> <pre><code>ping 172.16.15.5\n</code></pre> <p>Example:</p> <pre><code>s1-host2# ping 172.16.15.5\nPING 172.16.15.5 (172.16.15.5) 72(100) bytes of data.\n80 bytes from 172.16.15.5: icmp_seq=1 ttl=60 time=307 ms\n80 bytes from 172.16.15.5: icmp_seq=2 ttl=60 time=300 ms\n80 bytes from 172.16.15.5: icmp_seq=3 ttl=60 time=296 ms\n80 bytes from 172.16.15.5: icmp_seq=4 ttl=60 time=293 ms\n80 bytes from 172.16.15.5: icmp_seq=5 ttl=60 time=289 ms\n\n--- 172.16.15.5 ping statistics ---\n5 packets transmitted, 5 received, 0% packet loss, time 43ms\nrtt min/avg/max/mdev = 289.129/297.583/307.932/6.497 ms, pipe 5, ipg/ewma 10.984/302.312 ms\n</code></pre> <p>If all the IP address and routing settings have been completed correctly, then you should have reachability</p> </li> </ol> </li> </ol> <p>::: admonition Test your knowledge:</p> <p>When s1-Leaf 4 receives the incoming icmp packet from s1-Host 2, what would the process be for the switch to determine the path for the packet to be fowarded? :::</p> <p>LAB COMPLETE!</p> <p>::: admonition Helpful Commands:</p> <p>During the lab you can use the different commands to verify connectivity and behaviour for validation and troubleshooting purposes:</p> <ul> <li>show ip route</li> <li>show ip arp</li> <li>show ip interface brief</li> <li>show interface status :::</li> </ul>"},{"location":"cloudvision_portal/cvp_configlet/","title":"CVP Configlet, Change Control, and Rollback","text":"<p>Let's create a new CloudVision configlet. CloudVision configlets are snippets of configuration that are used to create a switch configuration.</p> <p>All of the switches have a base Configlet. Additional Configlets have been defined for AAA and VLANs.</p> <ol> <li>Log into the Arista Test Drive portal with your assigned URL. If you     don't have one, please see your ATD staff.</li> </ol> <p>::: {.thumbnail align=\"center\" title=\"This your lab access page. You can access your topology from here or copy your unique lab address to use with an ssh client.\"} ../images/cvp_configlet/nested_cvp_overview_1.png :::</p> <p>| </p> <ol> <li>Click on the link Click Here To Access Topology and navigate to     the below page. Click the CVP link on the left side of the     screen.</li> </ol> <p>| </p> <p>::: {.thumbnail align=\"center\" title=\"This is the main landing page for your lab. From here you can browse to CVP, Console Access (in your browser), click the individual icons to SSH to them, and access the Lab Guides.\"} ../images/cvp_configlet/nested_cvp_landing_1.png :::</p> <p>| </p> <ol> <li> <p>You will come to a login screen for CloudVision Portal. Enter the     username <code>arista</code> and the password <code>{REPLACE_PWD}</code></p> </li> <li> <p>For this lab, select Provisioning -&gt; Configlets from     CloudVision.</p> </li> <li> <p>Click the + in the top right and select Configlets to create     a new configlet.</p> </li> <li> <p>In the configuration section enter the command information as shown:</p> <pre><code>alias snz show interface counter | nz\n</code></pre> </li> <li> <p>Name the Configlet Alias.</p> </li> </ol> <p>| </p> <p>::: {.thumbnail align=\"center\" title=\"Creating the Alias configlet\"} ../images/cvp_configlet/cvp_configlet_1.gif :::</p> <p>| </p> <ol> <li>The Configlet can be validated against a device to ensure there     isn't a conflict and the configuration is validated. To validate,     click the checkbox in the top right section.</li> <li>Once the configuration is validated, Click the Save button to     save the Configlet</li> </ol> <p>| </p> <p>::: {.thumbnail align=\"center\" title=\"Assigning the Alias configlet we just created.\"} ../images/cvp_configlet/cvp_configlet_2.gif :::</p> <p>| </p> <ol> <li> <p>To apply the Configlet, navigate to Network Provisioning expand     the S1 container, right click on the S1-Leaf container and     select Manage -&gt; Configlet.</p> </li> <li> <p>Select the Alias Configlet and click Update. This activity     is to simply add a new configlet to the existing configlets applied     on the \\'Leaf\\' container. Do not Remove existing configlets     from the Proposed Configuration section.</p> <p>*Expert Tip - Use search bar to find Configlets faster*</p> </li> <li> <p>On the \\'Network Provisioning\\' page, Click the Save button to     save the changes to the topology.</p> </li> </ol> <p>| </p> <p>::: {.thumbnail align=\"center\" title=\"Creating a basic Change Control and running it to push the Alias to the devices.\"} ../images/cvp_configlet/cvp_configlet_3.gif :::</p> <p>| </p> <ol> <li>The screen will refresh and a \\'T\\' for task will appear above each     device, representing that tasks have been generated that need to run     to push the configuration change.</li> <li>Click Tasks in the left navigation column.</li> <li>Check each Task in the \\'Assignable Tasks\\' section, then click the     Create Change Control with 4 Tasks button. Select Parallel     then Create Change Control.</li> </ol> <p>:::: note ::: title Note :::</p> <p>Creating a Parallel Change Control will run all 4 tasks simultaneously. If we created a Series Change Control, the tasks would run one at a time</p> <p>*See the \\'CVP Advanced Change Control\\' lab guide for more information on Change Controls* ::::</p> <ol> <li>Select Review and Approve in the top right, then Approve in     the bottom right to approve the Change Control.</li> <li>Select Execute Change Control in the top right and then     Execute to execute the Change Control tasks.</li> <li>When the tasks are completed, navigate into the task by clicking on     the task object.</li> <li>Select the View Diff link on the right side of the screen to     review the Designed Configuration vs. Running Configuration. The     Designed Configuration is a combination of all configlets to build a     full device configuration. The Running Configuration is the     running-config prior to executing the task. Configuration     differences are highlighted to show New Lines, Mismatch Lines, and     To Reconcile.</li> </ol> <p>| </p>"},{"location":"cloudvision_portal/cvp_configlet/#rollback","title":"Rollback","text":"<p>| </p> <p>Oh no! That Alias wasn\\'t supposed to be deployed to production yet and now we need to return the leaf switches back to their original state. Not a problem, let\\'s quickly do a Rollback.</p> <ol> <li>If you\\'re still on the Change Control screen, you should see a     Rollback button on the upper right. If you already navigated     away from this screen, you can choose Provisioning at the top of the     page, click on Change Control, then select the name of the last run     Change Control</li> </ol> <p>| </p> <p>::: {.thumbnail align=\"center\" title=\"location of the Rollback button\"} ../images/cvp_configlet/cvp_configlet_4.png :::</p> <p>| </p> <ol> <li>Once you select Rollback, the screen that pops up will have you     select the switches you would like to rollback. Select all 4     switches, then click Create Rollback Change Control</li> </ol> <p>| </p> <p>::: {.thumbnail align=\"center\" title=\"This is the rollback confirmation page where you can select the specific tasks you would like to roll back\"} ../images/cvp_configlet/cvp_configlet_5.png :::</p> <p>| </p> <ol> <li>Click Review and Approve. You will be shown the specific lines     that will be removed from the running configuration of the switches.     This time, lets select the Execute Immediately switch, then     select Approve and Execute. The changes are being rolled back.     Whew!</li> </ol> <p>LAB COMPLETE</p>"},{"location":"eos_configuration/connecting/","title":"Connecting","text":"<ol> <li> <p>Log into the Arista Test Drive portal with your assigned URL. If you     don't have one, please see your ATD staff.</p> <p></p> </li> <li> <p>SSH to the public address assigned to the LabAccess jumphost server     (this is the Topology Address shown in the \"Welcome to Arista's     Test Drive!\" picture above). The username is <code>arista</code> and the     password is <code>{REPLACE_PWD}</code>:</p> <pre><code>ssh arista@{unique_address}.topo.testdrive.arista.com\n</code></pre> <p></p> </li> <li> <p>The LabAccess menu allows users to connect to each device and     specify lab topology. It is recommended to open multiple SSH     sessions or use the Screen option (under the SSH Menu) to jump     between devices rapidly.</p> <p>You can also Access the LabAccess Menu from your browser by clicking on Console Access.</p> <p></p> </li> </ol>"},{"location":"eos_configuration/l2evpn/","title":"L2 EVPN Services","text":"Note <p>This lab exercise is focused on the VXLAN EVPN configuration. IP addresses, MLAG and BGP Underlay are already configured.</p> <ol> <li> <p>Log into the LabAccess jumpserver:</p> <ol> <li> <p>Type <code>97</code> to access additional lab, then <code>evpn-labs</code> at the prompt to access the EVPN VXLAN content. Then type <code>l2evpn</code> for the Layer 2 EVPN lab. The script will configure the datacenter with the exception of s1-leaf4.</p> Note <p>Did you know the \"l2evpn\" script is composed of Python code that uses the CloudVision Portal REST API to automate the provisioning of CVP Configlets. The configlets that are configured via the REST API are <code>L2EVPN_s1-spine1</code>, <code>L2EVPN_s1-spine2</code>, <code>L2EVPN_s1-leaf1</code>, <code>L2EVPN_s1-leaf2</code>, <code>L2EVPN_s1-leaf3</code>, <code>L2EVPN_s1-leaf4</code>.</p> </li> </ol> </li> <li> <p>On s1-leaf4, check if Multi-Agent Routing Protocols are enabled.</p> <pre><code>s1-leaf4#show run section service\nservice routing protocols model multi-agent\ns1-leaf4#show ip route summary\n\nOperating routing protocol model: multi-agent\nConfigured routing protocol model: multi-agent\n\nVRF: default\n   Route Source                                Number Of Routes\n------------------------------------- -------------------------\n   connected                                                  4\n   static (persistent)                                        0\n   static (non-persistent)                                    0\n   VXLAN Control Service                                      0\n   static nexthop-group                                       0\n   ospf                                                       0\n     Intra-area: 0 Inter-area: 0 External-1: 0 External-2: 0\n     NSSA External-1: 0 NSSA External-2: 0\n   ospfv3                                                     0\n   bgp                                                        9\n     External: 7 Internal: 2\n   isis                                                       0\n     Level-1: 0 Level-2: 0\n   rip                                                        0\n   internal                                                  11\n   attached                                                   3\n   aggregate                                                  0\n   dynamic policy                                             0\n   gribi                                                      0\n\n   Total Routes                                              27\n\nNumber of routes per mask-length:\n   /8: 2         /24: 3        /30: 1        /31: 2        /32: 19\n</code></pre> Note <p>By default, EOS is using the GateD routing process. Activating (ArBGP) is requiring a reboot. This has been done prior to the lab buildout so no reboot is required here.</p> </li> <li> <p>On s1-leaf4, check the following operational states before     configuring EVPN constructs:</p> <ol> <li> <p>Verify EOS MLAG operational details.</p> Note <p>The MLAG state between s1-leaf4 and its peer s1-leaf3 will be inconsistent. This is expected as s1-leaf3 is fully configured and s1-leaf4 is not as of yet.</p> <pre><code>s1-leaf4#show mlag\nMLAG Configuration:              \ndomain-id                          :                MLAG\nlocal-interface                    :            Vlan4094\npeer-address                       :        10.255.255.1\npeer-link                          :       Port-Channel1\npeer-config                        :        inconsistent\n\nMLAG Status:                     \nstate                              :              Active\nnegotiation status                 :           Connected\npeer-link status                   :                  Up\nlocal-int status                   :                  Up\nsystem-id                          :   02:1c:73:c0:c6:14\ndual-primary detection             :            Disabled\ndual-primary interface errdisabled :               False\n\nMLAG Ports:                      \nDisabled                           :                   0\nConfigured                         :                   0\nInactive                           :                   0\nActive-partial                     :                   0\nActive-full                        :                   0\n</code></pre> </li> <li> <p>Verify BGP operational details for Underlay:</p> Note <p>You should see 3 underlay sessions; one to each spine and one to the MLAG peer for redundancy.</p> <pre><code>s1-leaf4#show ip bgp summary\nBGP summary information for VRF default\nRouter identifier 10.111.254.4, local AS number 65102\nNeighbor Status Codes: m - Under maintenance\nNeighbor     V AS           MsgRcvd   MsgSent  InQ OutQ  Up/Down State   PfxRcd PfxAcc\n10.111.1.6   4 65100              9        12    0    0 00:00:07 Estab   6      6\n10.111.2.6   4 65100              9        12    0    0 00:00:07 Estab   5      5\n10.255.255.1 4 65102              8        10    0    0 00:00:07 Estab   10     10  \n</code></pre> </li> <li> <p>Check the IP routing table:</p> Note <p>Notice that s1-leaf4 has 2 ECMP paths for reaching s1-leaf1 or s1-leaf2 loopacks.</p> <pre><code>s1-leaf4#show ip route\n\nVRF: default\nCodes: C - connected, S - static, K - kernel, \n      O - OSPF, IA - OSPF inter area, E1 - OSPF external type 1,\n      E2 - OSPF external type 2, N1 - OSPF NSSA external type 1,\n      N2 - OSPF NSSA external type2, B - Other BGP Routes,\n      B I - iBGP, B E - eBGP, R - RIP, I L1 - IS-IS level 1,\n      I L2 - IS-IS level 2, O3 - OSPFv3, A B - BGP Aggregate,\n      A O - OSPF Summary, NG - Nexthop Group Static Route,\n      V - VXLAN Control Service, M - Martian,\n      DH - DHCP client installed default route,\n      DP - Dynamic Policy Route, L - VRF Leaked,\n      G  - gRIBI, RC - Route Cache Route\n\nGateway of last resort is not set\n\nB E      10.111.0.1/32 [200/0] via 10.111.1.6, Ethernet2\nB E      10.111.0.2/32 [200/0] via 10.111.2.6, Ethernet3\nC        10.111.1.6/31 is directly connected, Ethernet2\nB E      10.111.1.0/24 [200/0] via 10.111.1.6, Ethernet2\nC        10.111.2.6/31 is directly connected, Ethernet3\nB E      10.111.2.0/24 [200/0] via 10.111.2.6, Ethernet3\nB I      10.111.112.0/24 [200/0] via 10.255.255.1, Vlan4094\nB E      10.111.253.1/32 [200/0] via 10.111.1.6, Ethernet2\n                                 via 10.111.2.6, Ethernet3\nB I      10.111.253.3/32 [200/0] via 10.255.255.1, Vlan4094\nB E      10.111.254.1/32 [200/0] via 10.111.1.6, Ethernet2\n                                 via 10.111.2.6, Ethernet3\nB E      10.111.254.2/32 [200/0] via 10.111.1.6, Ethernet2\n                                 via 10.111.2.6, Ethernet3\nB I      10.111.254.3/32 [200/0] via 10.255.255.1, Vlan4094\nC        10.111.254.4/32 is directly connected, Loopback0\nC        10.255.255.0/30 is directly connected, Vlan4094\nC        192.168.0.0/24 is directly connected, Management0\n</code></pre> </li> </ol> </li> <li> <p>On s1-leaf4, configure the BGP EVPN control-plane.</p> <ol> <li> <p>Configure the EVPN control plane.</p> Note <p>In this lab, the Spines serve as EVPN Route Servers. They receive the EVPN Routes from each leaf and, due to our eBGP setup, will naturally pass them along the other leaves.</p> <p>Also note that BGP standard and extended communities are explicitly enabled on the peering. EVPN makes use of extended BGP communities for route signaling and standard communities allow for various other functions such as BGP maintenance mode.</p> <p>Lastly, note in this setup we use eBGP-multihop peerings with the Loopback0 interfaces of each switch. This follows Arista best-practice designs for separation of Underlay (peerings done using physical Ethernet interfaces) and Overlay (peerings done using Loopbacks) when leveraging eBGP. Other options exist and can be discussed with your Arista SE.</p> <pre><code>router bgp 65102\n    neighbor SPINE-EVPN peer group\n    neighbor SPINE-EVPN remote-as 65100\n    neighbor SPINE-EVPN update-source Loopback0\n    neighbor SPINE-EVPN ebgp-multihop 3\n    neighbor SPINE-EVPN send-community standard extended\n    neighbor 10.111.0.1 peer group SPINE-EVPN\n    neighbor 10.111.0.2 peer group SPINE-EVPN\n    !\n    address-family evpn\n       neighbor SPINE-EVPN activate\n</code></pre> </li> <li> <p>Verify the EVPN Control-Plane is established to both Spine     peers.</p> <pre><code>s1-leaf4(config-router-bgp)#show bgp evpn summary \nBGP summary information for VRF default\nRouter identifier 10.111.254.4, local AS number 65102\nNeighbor Status Codes: m - Under maintenance\nNeighbor   V AS           MsgRcvd   MsgSent  InQ OutQ  Up/Down State   PfxRcd PfxAcc\n10.111.0.1 4 65100              6         5    0    0 00:00:03 Estab   2      2\n10.111.0.2 4 65100              6         4    0    0 00:00:03 Estab   2      2\n</code></pre> </li> </ol> </li> <li> <p>On s1-leaf4, configure the VXLAN data-plane for transport.</p> <ol> <li> <p>Configure Loopback1 with the shared IP of s1-leaf3.</p> Note <p>This is referred to as an MLAG VTEP. The MLAG peer leafs provide redundancy by sharing the Loopback1 IP and jointly advertising reachability for it. Route redistribution has already been configured for the underlay.</p> <pre><code>interface Loopback1\n   description VTEP\n   ip address 10.111.253.3/32\n</code></pre> </li> <li> <p>Configure the Vxlan1 interface with the Loopback1 as the source.</p> Note <p>This is the logical interface that will provide VXLAN header encap and decap functions.</p> <pre><code>interface Vxlan1\n   vxlan source-interface Loopback1\n</code></pre> </li> </ol> </li> <li> <p>Configure a Layer 2 EVPN service on s1-leaf4.</p> <ol> <li> <p>Add the local Layer 2 VLAN with an ID of 112.</p> <pre><code>vlan 112\n   name Host_Network_112\n</code></pre> </li> <li> <p>Map the local Layer 2 VLAN with a matching VNI.</p> Note <p>This is how the switch understands which local Layer 2 VLAN maps to which VNI in the overlay. The example shows matching them one to one, but any scheme or method is valid, such as adding 10000 to the VLAN ID.</p> <pre><code>interface Vxlan1\n   vxlan vlan 112 vni 112\n</code></pre> </li> <li> <p>Add the mac-vrf EVPN configuration for VLAN 112.</p> Note <p>Here we configure a VLAN-based service with EVPN. It has two components. The first is a route-distinguisher, or RD to identify the router (or leaf switch) that is originating the EVPN routes. This can be manually defined in the format of Number : Number, such as Loopback0 : VLAN ID or as we do in this case, let EOS automatically allocate one.</p> <p>Second is the route-target, or RT. The RT is used by the leaf switches in the network to determine if they should import the advertised route into their local table(s). If they receive an EVPN route, they check the RT value and see if they have a matching RT configured in BGP. If they do, they import the route into the associated mac-vrf (or VLAN). If they do not, they ignore the route.</p> <pre><code>router bgp 65102\n   !\n   vlan 112\n      rd auto\n      route-target both 112:112\n      redistribute learned\n</code></pre> </li> <li> <p>Configure the host-facing MLAG port.</p> <pre><code>interface Port-Channel5\n   description MLAG Downlink - s1-host2\n   switchport access vlan 112\n   mlag 5\n!\ninterface Ethernet4\n   description MLAG Downlink - s1-host2\n   channel-group 5 mode active\n</code></pre> </li> </ol> </li> <li> <p>With the Layer 2 EVPN Service configured, verify the operational     state.</p> <ol> <li> <p>Check the VXLAN data-plane configuration.</p> Note <p>Here we can see some useful commands for VXLAN verification. <code>show vxlan config-sanity detail</code> verifies a number of standard things locally and with the MLAG peer to ensure all basic criteria are met. <code>show interfaces Vxlan1</code> provides a consolidated series of outputs of operational VXLAN data such as control-plane mode (EVPN in this case), VLAN to VNI mappings and discovered VTEPs.</p> <pre><code>s1-leaf4#show vxlan config-sanity detail \nCategory                            Result  Detail                                            \n---------------------------------- -------- --------------------------------------------------\nLocal VTEP Configuration Check        OK                                                      \n  Loopback IP Address                 OK                                                      \n  VLAN-VNI Map                        OK                                                      \n  Routing                             OK                                                      \n  VNI VRF ACL                         OK                                                      \n  Decap VRF-VNI Map                   OK                                                      \n  VRF-VNI Dynamic VLAN                OK                                                      \nRemote VTEP Configuration Check       OK                                                      \n  Remote VTEP                         OK                                                      \nPlatform Dependent Check              OK                                                      \n  VXLAN Bridging                      OK                                                      \n  VXLAN Routing                       OK    VXLAN Routing not enabled                         \nCVX Configuration Check               OK                                                      \n  CVX Server                          OK    Not in controller client mode                     \nMLAG Configuration Check              OK    Run 'show mlag config-sanity' to verify MLAG config\n  Peer VTEP IP                        OK                                                      \n  MLAG VTEP IP                        OK                                                      \n  Peer VLAN-VNI                       OK                                                      \n  Virtual VTEP IP                     OK\n\ns1-leaf4#show interfaces Vxlan1\nVxlan1 is up, line protocol is up (connected)\nHardware is Vxlan\nSource interface is Loopback1 and is active with 10.111.253.3\nReplication/Flood Mode is headend with Flood List Source: EVPN\nRemote MAC learning via EVPN\nVNI mapping to VLANs\nStatic VLAN to VNI mapping is \n  [112, 112]       \nNote: All Dynamic VLANs used by VCS are internal VLANs.\n      Use 'show vxlan vni' for details.\nStatic VRF to VNI mapping is not configured\nHeadend replication flood vtep list is:\n112 10.111.253.1   \nMLAG Shared Router MAC is 0000.0000.0000 \n</code></pre> </li> <li> <p>On s1-leaf1 (and/or s1-leaf2) verify the IMET table to     ensure s1-leaf4 has been discovered in the overlay.</p> Note <p>The Inclusive Multicast Ethernet Tag, or IMET, route is how a VTEP advertises membership in a given Layer 2 service, or VXLAN segment. This is also known as the EVPN Type 3 Route. Other leaves receive this route, evaluate the RT to see if they have a matching configuration and, if so, import the advertising VTEP into their flood list for BUM traffic.</p> <pre><code>s1-leaf1#show bgp evpn route-type imet \nBGP routing table information for VRF default\nRouter identifier 10.111.254.1, local AS number 65101\nRoute status codes: s - suppressed, * - valid, - active, E - ECMP head, e - ECMP\n                    S - Stale, c - Contributing to ECMP, b - backup\n                    % - Pending BGP convergence\nOrigin codes: i - IGP, e - EGP, ? - incomplete\nAS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop\n\n          Network                Next Hop              Metric  LocPref Weight  Path\n* Ec   RD: 10.111.254.3:112 imet 10.111.253.3\n                                10.111.253.3          -       100     0       65100 65102 i\n*  ec   RD: 10.111.254.3:112 imet 10.111.253.3\n                                10.111.253.3          -       100     0       65100 65102 i\n* Ec   RD: 10.111.254.4:112 imet 10.111.253.3\n                                10.111.253.3          -       100     0       65100 65102 i\n*  ec   RD: 10.111.254.4:112 imet 10.111.253.3\n                                10.111.253.3          -       100     0       65100 65102 i\n*     RD: 10.111.254.1:112 imet 10.111.253.1\n                                -                     -       -       0       i    \ns1-leaf1#show interfaces Vxlan1\nVxlan1 is up, line protocol is up (connected)\n  Hardware is Vxlan\n  Source interface is Loopback1 and is active with 10.111.253.1\n  Replication/Flood Mode is headend with Flood List Source: EVPN\n  Remote MAC learning via EVPN\n  VNI mapping to VLANs\n  Static VLAN to VNI mapping is \n    [112, 112]       \n  Note: All Dynamic VLANs used by VCS are internal VLANs.\n        Use 'show vxlan vni' for details.\n  Static VRF to VNI mapping is not configured\n  Headend replication flood vtep list is:\n  112 10.111.253.3   \n  MLAG Shared Router MAC is 0000.0000.0000\n</code></pre> </li> <li> <p>Log into s1-host1 and ping s2-host2 to populate the     network\\'s MAC tables.</p> <pre><code>s1-host1#ping 10.111.112.202\nPING 10.111.112.202 (10.111.112.202) 72(100) bytes of data.\n80 bytes from 10.111.112.202: icmp_seq=1 ttl=64 time=16.8 ms\n80 bytes from 10.111.112.202: icmp_seq=2 ttl=64 time=14.7 ms\n80 bytes from 10.111.112.202: icmp_seq=3 ttl=64 time=16.8 ms\n80 bytes from 10.111.112.202: icmp_seq=4 ttl=64 time=16.7 ms\n80 bytes from 10.111.112.202: icmp_seq=5 ttl=64 time=15.2 ms\n--- 10.111.112.202 ping statistics ---\n5 packets transmitted, 5 received, 0% packet loss, time 61ms\n</code></pre> </li> <li> <p>On s1-leaf1, check the local MAC address-table.</p> Note <p>The MAC addresses in your lab may differ as they are randomly generated during the lab build. We see here that the MAC of s1-host2 has been learned via the Vxlan1 interface on s1-leaf1.</p> <pre><code>s1-leaf1#show mac address-table dynamic \nMac Address Table\n------------------------------------------------------------------\n\nVlan    Mac Address       Type        Ports      Moves   Last Move\n----    -----------       ----        -----      -----   ---------\n112    001c.73c0.c616    DYNAMIC     Po5        1       0:00:41 ago\n112    001c.73c0.c617    DYNAMIC     Vx1        1       0:00:41 ago\nTotal Mac Addresses for this criterion: 2\n      Multicast Mac Address Table\n------------------------------------------------------------------\n\nVlan    Mac Address       Type        Ports\n----    -----------       ----        -----\nTotal Mac Addresses for this criterion: 0\n</code></pre> </li> <li> <p>On s1-leaf1, check the EVPN control-plane for the associated     host MAC.</p> Note <p>We see the MAC of s1-host2 multiple times in the control-plane due to our redundant MLAG and ECMP design. Both s1-leaf3 and s1-leaf4 are attached to s1-host2 and therefore will generate this Type 2 EVPN route for its MAC. They each then send this route up to the redundant Spines (or EVPN Route Servers) which provides an ECMP path to the host.</p> <pre><code>s1-leaf1#show bgp evpn route-type mac-ip \nBGP routing table information for VRF default\nRouter identifier 10.111.254.1, local AS number 65101\nRoute status codes: s - suppressed, * - valid, - active, E - ECMP head, e - ECMP\n                    S - Stale, c - Contributing to ECMP, b - backup\n                    % - Pending BGP convergence\nOrigin codes: i - IGP, e - EGP, ? - incomplete\nAS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop \n\n          Network                Next Hop              Metric  LocPref Weight  Path\n*     RD: 10.111.254.1:112 mac-ip 001c.73c0.c616\n                                -                     -       -       0       i\n*     RD: 10.111.254.1:112 mac-ip 001c.73c0.c616 10.111.112.201\n                                -                     -       -       0       i\n* Ec   RD: 10.111.254.3:112 mac-ip 001c.73c0.c617\n                                10.111.253.3          -       100     0       65100 65102 i\n*  ec   RD: 10.111.254.3:112 mac-ip 001c.73c0.c617\n                                10.111.253.3          -       100     0       65100 65102 i\n* Ec   RD: 10.111.254.4:112 mac-ip 001c.73c0.c617\n                                10.111.253.3          -       100     0       65100 65102 i\n*  ec   RD: 10.111.254.4:112 mac-ip 001c.73c0.c617\n                                10.111.253.3          -       100     0       65100 65102 i\n</code></pre> </li> <li> <p>On s1-leaf1, check the VXLAN data-plane for MAC address.</p> Note <p>Though both s1-leaf3 and s1-leaf4 are advertising the MAC of s1-host2 recall that they have a shared MLAG VTEP IP for VXLAN reachability. Therefore we only see one possible destination for this host MAC. The <code>show l2rib output mac &lt;MAC of remote host</code> command then allows us to see the VTEP info in the hardware. Finally we can verify the ECMP path to the remote MLAG VTEP via s1-spine1 and s1-spine2 with a simple <code>show ip route 10.111.253.3</code> command.</p> <pre><code>s1-leaf1#show vxlan address-table evpn \n  Vxlan Mac Address Table\n----------------------------------------------------------------------\n\nVLAN  Mac Address     Type      Prt  VTEP             Moves   Last Move\n----  -----------     ----      ---  ----             -----   ---------\n112  001c.73c0.c617  EVPN      Vx1  10.111.253.3     1       0:00:57 ago\nTotal Remote Mac Addresses for this criterion: 1\ns1-leaf1#show l2rib output mac 001c.73c0.c617\n001c.73c0.c617, VLAN 112, seq 1, pref 16, evpnDynamicRemoteMac, source: BGP\n   VTEP 10.111.253.3\ns1-leaf1#show ip route 10.111.253.3\n\nVRF: default\nCodes: C - connected, S - static, K - kernel,\n       O - OSPF, IA - OSPF inter area, E1 - OSPF external type 1,\n       E2 - OSPF external type 2, N1 - OSPF NSSA external type 1,\n       N2 - OSPF NSSA external type2, B - Other BGP Routes,\n       B I - iBGP, B E - eBGP, R - RIP, I L1 - IS-IS level 1,\n       I L2 - IS-IS level 2, O3 - OSPFv3, A B - BGP Aggregate,\n       A O - OSPF Summary, NG - Nexthop Group Static Route,\n       V - VXLAN Control Service, M - Martian,\n       DH - DHCP client installed default route,\n       DP - Dynamic Policy Route, L - VRF Leaked,\n       G  - gRIBI, RC - Route Cache Route\n\n B E      10.111.253.3/32 [200/0] via 10.111.1.0, Ethernet2\n                                  via 10.111.2.0, Ethernet3\n</code></pre> </li> </ol> </li> </ol> <p>LAB COMPLETE!</p>"},{"location":"eos_configuration/l2ls/","title":"Layer 2 Leaf-Spine","text":"<ol> <li> <p>Log into the LabAccess jumpserver to prepare the lab environment:</p> <ol> <li>Type <code>l2ls</code> at the prompt. The script will configure the     datacenter with the exception of **s1-leaf</li> </ol> Note <p>Did you know the \"l2ls\" script is composed of Python code that uses the CloudVision REST API to automate the provisioning of CVP Configlets? The configlets that are configured via the REST API are <code>L2LS_s1-spine1</code>, <code>L2LS_s1-spine2</code>, <code>L2LS_s1-leaf1</code>, <code>L2LS_s1-leaf2</code>, <code>L2LS_s1-leaf3</code>.</p> Note <p>The manually-entered commands below that are part of this lab are equivalent to <code>L2LS_s1-leaf4_complete</code>.</p> </li> <li> <p>Prior to configuration, verify the current operational status of the environment.</p> Note <p>Full commands will be typed for reference in lab steps, but commands in EOS can be shortened or tab-completed at the user's discretion.</p> <ol> <li> <p>On s1-leaf3, verify EOS MLAG operational details. Since     configuration is not complete yet, it will not be up.</p> <pre><code>s1-leaf3#show mlag\nMLAG Configuration:              \ndomain-id                          :                MLAG\nlocal-interface                    :            Vlan4094\npeer-address                       :        10.255.255.2\npeer-link                          :       Port-Channel1\npeer-config                        :                   \n\nMLAG Status:                     \nstate                              :            Inactive\nnegotiation status                 :          Connecting\npeer-link status                   :      Lowerlayerdown\nlocal-int status                   :      Lowerlayerdown\nsystem-id                          :   00:00:00:00:00:00\ndual-primary detection             :            Disabled\ndual-primary interface errdisabled :               False\n\nMLAG Ports:                      \nDisabled                           :                   2\nConfigured                         :                   0\nInactive                           :                   0\nActive-partial                     :                   0\nActive-full                        :                   0\n\ns1-leaf3#show mlag interfaces \n                                                                    local/remote\nmlag   desc                                state   local   remote        status\n----- -------------------------------- ---------- ------- -------- ------------\n5    MLAG Downlink - s1-host2         disabled     Po5        -          up/-\n34   MLAG Uplink - s1-spine1 and s1   disabled    Po34        -          up/-\n</code></pre> </li> </ol> </li> <li> <p>Configure the MLAG domain on s1-leaf4 using the following steps.</p> <ol> <li> <p>Configure the layer 2 VLANs for host connectivity.</p> Note <p>Arista EOS utilizes the Industry-Standard CLI. When entering configuration commands, be sure to first type <code>configure</code> to enter configuration mode.</p> <pre><code>vlan 112\n    name Host_Network_112\n!\nvlan 134\n    name Host_Network_134\n</code></pre> </li> <li> <p>Configure the layer 2 VLANs MLAG communication between the peer switches.</p> Note <p>Arista best practices leverage a <code>trunk group</code> to limit layer 2 forwarding of the MLAG peering VLAN to only the peer-link, which we will see later. This is because we also recommend disabling STP operation on the MLAG peering VLAN to ensure MLAG adjacency can form immediately as EOS comes up without waiting for the STP learning process to complete.</p> <pre><code>vlan 4094\n    trunk group MLAGPEER\n!\nno spanning-tree vlan-id 4094\n</code></pre> </li> <li> <p>Configure the MLAG Peer-link Port-Channel on s1-leaf4 to     connect to s1-leaf3.</p> Note <p>Here, the <code>trunk group</code> applied to the MLAG peering VLAN is applied to the peer-link to ensure the MLAG VLAN is only forwarded on this link. Note we also can do interface ranges and groups when applying similar configurations as shown. Member interfaces of a port-channel will inherit all configuration of the parent so there is no need to apply things like switchport commands to the individual interfaces.</p> <pre><code>interface Port-Channel1\n    description MLAG Peer-link - s1-leaf3\n    switchport mode trunk\n    switchport trunk group MLAGPEER\n!\ninterface Ethernet1,6\n    description MLAG Peer-link - s1-leaf3\n    channel-group 1 mode active\n</code></pre> </li> <li> <p>Verify Port-Channel and L2 forwarding status.</p> Note <p>In EOS, any command can be run from any CLI mode. Here we can run show commands directly from interface configuration mode.</p> <pre><code>s1-leaf4(config-if-Et1,6)#show interfaces status\nPort       Name                      Status       Vlan     Duplex Speed  Type            Flags Encapsulation\nEt1        MLAG Peer-link - s1-leaf3 connected    in Po1   full   1G     EbraTestPhyPort\nEt2                                  connected    1        full   1G     EbraTestPhyPort\nEt3                                  connected    1        full   1G     EbraTestPhyPort\nEt4                                  connected    1        full   1G     EbraTestPhyPort\nEt6        MLAG Peer-link - s1-leaf3 connected    in Po1   full   1G     EbraTestPhyPort\nMa0                                  connected    routed   a-full a-1G   10/100/1000\nPo1        MLAG Peer-link - s1-leaf3 connected    trunk    full   2G     N/A\n\ns1-leaf4(config-if-Et1,6)#show port-channel dense\n\n                Flags\n-------------------------- ----------------------------- -------------------------\n    a - LACP Active            p - LACP Passive           * - static fallback\n    F - Fallback enabled       f - Fallback configured    ^ - individual fallback\n    U - In Use                 D - Down\n    + - In-Sync                - - Out-of-Sync            i - incompatible with agg\n    P - bundled in Po          s - suspended              G - Aggregable\n    I - Individual             S - ShortTimeout           w - wait for agg\nE - Inactive. The number of configured port channels exceeds the config limit\n    M - Exceeds maximum weight\n\nNumber of channels in use: 1\nNumber of aggregators: 1\n\n    Port-Channel       Protocol    Ports\n------------------ -------------- ------------------\n    Po1(U)             LACP(a)     Et1(PG+) Et6(PG+)\n\ns1-leaf4(config-if-Et1,6)#show interfaces trunk\nPort            Mode            Status          Native vlan\nPo1             trunk           trunking        1\n\nPort            Vlans allowed\nPo1             All\n\nPort            Vlans allowed and active in management domain\nPo1             1,112,134,4094\n\nPort            Vlans in spanning tree forwarding state\nPo1             1,112,134,4094\n</code></pre> </li> <li> <p>Configure the MLAG Layer 3 peering network.</p> Note <p>The MLAG VLAN and peering network are used only for communication between the peer switches. As such, the IP network that is used does not need to be unique or routable (though it can be if customers choose). In the lab, we re-use 10.255.255.252/30 on all MLAG pairs.</p> <pre><code>interface Vlan4094\n    description MLAG Peer Network\n    ip address 10.255.255.2/30\n</code></pre> </li> <li> <p>Verify layer 3 connectivity between the peer switches on the     MLAG VLAN.</p> <pre><code>s1-leaf4(config-if-Vl4094)#ping 10.255.255.1\nPING 10.255.255.253 (10.255.255.1) 72(100) bytes of data.\n80 bytes from 10.255.255.1: icmp_seq=1 ttl=64 time=7.33 ms\n80 bytes from 10.255.255.1: icmp_seq=2 ttl=64 time=6.82 ms\n80 bytes from 10.255.255.1: icmp_seq=3 ttl=64 time=5.65 ms\n80 bytes from 10.255.255.1: icmp_seq=4 ttl=64 time=7.16 ms\n80 bytes from 10.255.255.1: icmp_seq=5 ttl=64 time=7.53 ms\n\n--- 10.255.255.1 ping statistics ---\n5 packets transmitted, 5 received, 0% packet loss, time 29ms\nrtt min/avg/max/mdev = 5.659/6.903/7.530/0.663 ms, ipg/ewma 7.281/7.135 ms\n</code></pre> </li> <li> <p>Define the MLAG Domain parameters to establish the peering.</p> Note <p>Similar to the peering network, the MLAG <code>domain-id</code> can be re-used across pairs as it is a locally-significant value. The other values describe the connectivity between the peer switches. ::::</p> <pre><code>mlag configuration\n    domain-id MLAG\n    local-interface Vlan4094\n    peer-address 10.255.255.1\n    peer-link Port-Channel1\n</code></pre> </li> <li> <p>Verify the MLAG relationship between s1-leaf3 and     s1-leaf4.</p> <pre><code>s1-leaf4(config-mlag)#show mlag\nMLAG Configuration:\ndomain-id                          :                MLAG\nlocal-interface                    :            Vlan4094\npeer-address                       :        10.255.255.1\npeer-link                          :       Port-Channel1\npeer-config                        :          consistent\n\nMLAG Status:\nstate                              :              Active\nnegotiation status                 :           Connected\npeer-link status                   :                  Up\nlocal-int status                   :                  Up\nsystem-id                          :   02:1c:73:c0:c6:14\ndual-primary detection             :            Disabled\ndual-primary interface errdisabled :               False\n\nMLAG Ports:\nDisabled                           :                   0\nConfigured                         :                   0\nInactive                           :                   0\nActive-partial                     :                   0\nActive-full                        :                   0\n</code></pre> </li> </ol> </li> <li> <p>With the MLAG domain established, configure the MLAG uplink to the     spines on s1-leaf4.</p> <ol> <li> <p>Configure a Port-Channel and member interfaces on s1-leaf4     connecting to s1-spine1 and s1-spine2.</p> Note <p>What matters is that the <code>mlag</code> ID of the Port-Channel matches between the MLAG peers. The <code>Port-Channel</code> ID is only locally-significant to the switch, but best practice is to match all <code>mlag</code> and <code>Port-Channel</code> IDs. ::::</p> <pre><code>interface Port-Channel34\n    description MLAG Uplink - s1-spine1 and s1-spine2\n    switchport mode trunk\n    mlag 34\n!\ninterface Ethernet2\n    description MLAG Uplink - s1-spine1\n    channel-group 34 mode active\n!\ninterface Ethernet3\n    description MLAG Uplink - s1-spine2\n    channel-group 34 mode active\n</code></pre> </li> <li> <p>Verify the MLAG Port-Channel is negotiated between the peers and     all interfaces are aggregated.</p> <pre><code>s1-leaf4(config-if-Et3)#show mlag | begin Ports\nMLAG Ports:\nDisabled                           :                   0\nConfigured                         :                   0\nInactive                           :                   0\nActive-partial                     :                   0\nActive-full                        :                   1\n\ns1-leaf4(config-if-Et3)#show mlag interfaces\n                                                                                            local/remote\n    mlag       desc                                       state       local       remote          status\n---------- ------------------------------------ ----------------- ----------- ------------ ------------\n    34       MLAG Uplink - s1-spine1 and s1       active-full        Po34         Po34           up/up\ns1-leaf4(config-if-Et3)#show port-channel dense\n\n                Flags\n-------------------------- ----------------------------- -------------------------\n    a - LACP Active            p - LACP Passive           * - static fallback\n    F - Fallback enabled       f - Fallback configured    ^ - individual fallback\n    U - In Use                 D - Down\n    + - In-Sync                - - Out-of-Sync            i - incompatible with agg\n    P - bundled in Po          s - suspended              G - Aggregable\n    I - Individual             S - ShortTimeout           w - wait for agg\nE - Inactive. The number of configured port channels exceeds the config limit\n    M - Exceeds maximum weight\n\nNumber of channels in use: 2\nNumber of aggregators: 2\n\n    Port-Channel       Protocol    Ports\n------------------ -------------- ----------------------------------\n    Po1(U)             LACP(a)     Et1(PG+) Et6(PG+)\n    Po34(U)            LACP(a)     Et2(PG+) Et3(PG+) PEt2(P) PEt3(P)\n</code></pre> </li> </ol> </li> <li> <p>Now that uplinks to the spines are established, configure downstream     host connectivity on s1-leaf4.</p> <ol> <li> <p>Configure a Port-Channel and member interface on s1-leaf4     connecting to s1-host2.</p> <pre><code>interface Port-Channel5\n    description MLAG Downlink - s1-host2\n    switchport access vlan 112\n    mlag 5\n!\ninterface Ethernet4\n    description MLAG Downlink - s1-host2\n    channel-group 5 mode active\n</code></pre> </li> <li> <p>Verify the host-facing MLAG Port-Channel is negotiated between     the peers and all interfaces are aggregated.</p> <pre><code>s1-leaf4(config-if-Et4)#show mlag interfaces 5\n                                                                                    local/remote\n    mlag       desc                                 state       local       remote          status\n---------- ------------------------------ ----------------- ----------- ------------ ------------\n    5       MLAG Downlink - s1-host2       active-full         Po5          Po5           up/up\ns1-leaf4(config-if-Et4)#show port-channel 5\nPort Channel Port-Channel5:\nActive Ports: Ethernet4 PeerEthernet4\n</code></pre> </li> </ol> </li> <li> <p>Validate connectivity from s1-host1 to s1-host2 by logging     into s1-host1 through the menu (option 5 in ssh menu) or using     screen.</p> <pre><code>&gt; s1-host1#ping 10.111.112.202\n&gt; PING 10.111.112.202 (10.111.112.202) 72(100) bytes of data.\n&gt; 80 bytes from 10.111.112.202: icmp_seq=1 ttl=64 time=47.7 ms\n&gt; 80 bytes from 10.111.112.202: icmp_seq=2 ttl=64 time=38.8 ms\n&gt; 80 bytes from 10.111.112.202: icmp_seq=3 ttl=64 time=30.7 ms\n&gt; 80 bytes from 10.111.112.202: icmp_seq=4 ttl=64 time=21.7 ms\n&gt; 80 bytes from 10.111.112.202: icmp_seq=5 ttl=64 time=19.1 ms\n&gt;\n&gt; --- 10.111.112.202 ping statistics ---\n&gt; 5 packets transmitted, 5 received, 0% packet loss, time 41ms\n&gt; rtt min/avg/max/mdev = 19.128/31.636/47.743/10.637 ms, pipe 5, ipg/ewma 10.272/38.948 ms\n</code></pre> </li> <li> <p>Verify layer 2 forwarding information on the spines.</p> <pre><code>&gt; s1-spine1#show mac address-table vlan 112\n&gt;           Mac Address Table\n&gt; ------------------------------------------------------------------\n&gt;\n&gt; Vlan    Mac Address       Type        Ports      Moves   Last Move\n&gt; ----    -----------       ----        -----      -----   ---------\n&gt;  112    001c.73c0.c611    STATIC      Po1\n&gt;  112    001c.73c0.c616    DYNAMIC     Po12       1       0:01:08 ago\n&gt;  112    001c.73c0.c617    DYNAMIC     Po34       1       0:03:02 ago\n&gt; Total Mac Addresses for this criterion: 3\n&gt;\n&gt;           Multicast Mac Address Table\n&gt; ------------------------------------------------------------------\n&gt;\n&gt; Vlan    Mac Address       Type        Ports\n&gt; ----    -----------       ----        -----\n&gt; Total Mac Addresses for this criterion: 0\n</code></pre> </li> <li> <p>Explore other command outputs related to MLAG Operation on     s1-leaf4.</p> <ol> <li> <p>Verify MLAG peer roles and detailed state information.</p> Note <p>The <code>show mlag detail</code> output contains a wealth of information. Notice that while there is a <code>primary</code> and <code>secondary</code> role for the MLAG peers, it is not a configurable value. The peers automatically negotiate this between themselves. The MLAG primary device is responsible for all STP processing for both peers. The <code>Reload delay</code> value is also very important in upgrade and maintenance scenarios.</p> <pre><code>s1-leaf4#show mlag detail\nMLAG Configuration:\ndomain-id                          :                MLAG\nlocal-interface                    :            Vlan4094\npeer-address                       :        10.255.255.1\npeer-link                          :       Port-Channel1\npeer-config                        :          consistent\n\nMLAG Status:\nstate                              :              Active\nnegotiation status                 :           Connected\npeer-link status                   :                  Up\nlocal-int status                   :                  Up\nsystem-id                          :   02:1c:73:c0:c6:14\ndual-primary detection             :            Disabled\ndual-primary interface errdisabled :               False\n\nMLAG Ports:\nDisabled                           :                   0\nConfigured                         :                   0\nInactive                           :                   0\nActive-partial                     :                   0\nActive-full                        :                   2\n\nMLAG Detailed Status:\nState                           :           secondary\nPeer State                      :             primary\nState changes                   :                   2\nLast state change time          :         0:42:12 ago\nHardware ready                  :                True\nFailover                        :               False\nFailover Cause(s)               :             Unknown\nLast failover change time       :               never\nSecondary from failover         :               False\nPeer MAC address                :   00:1c:73:c0:c6:14\nPeer MAC routing supported      :               False\nReload delay                    :         300 seconds\nNon-MLAG reload delay           :         300 seconds\nPorts errdisabled               :               False\nLacp standby                    :               False\nConfigured heartbeat interval   :             4000 ms\nEffective heartbeat interval    :             4000 ms\nHeartbeat timeout               :            60000 ms\nLast heartbeat timeout          :               never\nHeartbeat timeouts since reboot :                   0\nUDP heartbeat alive             :                True\nHeartbeats sent/received        :             633/635\nPeer monotonic clock offset     :    0.000013 seconds\nAgent should be running         :                True\nP2p mount state changes         :                   1\nFast MAC redirection enabled    :               False\n</code></pre> </li> <li> <p>Configure a VLAN on s1-leaf4 only to see how MLAG tracks     consistency between the peer switches.</p> Note <p>It is critical that the MLAG peers be consistent to ensure proper forwarding and operation. The <code>show mlag config-sanity</code> command helps to track values that are not consistent. These values should be rectified in production environments unless guided otherwise by an Arista SE.</p> <pre><code>s1-leaf4(config)#vlan 999\ns1-leaf4(config-vlan-999)#name TEMP\ns1-leaf4(config-vlan-999)#show mlag config-sanity\nNo per interface configuration inconsistencies found.\n\nGlobal configuration inconsistencies:\n    Feature                   Attribute       Local value    Peer value\n-------------- --------------------------- ----------------- ----------\n    bridging        admin-state vlan 999            active             -\n    bridging       mac-learning vlan 999              True             -\n\n\ns1-leaf4(config-vlan-999)#no vlan 999\ns1-leaf4(config)#show mlag config-sanity\nNo global configuration inconsistencies found.\n\nNo per interface configuration inconsistencies found.\n</code></pre> </li> </ol> </li> </ol> <p>LAB COMPLETE!</p>"},{"location":"eos_configuration/l3ls/","title":"Layer 3 Leaf-Spine","text":"Note <p>The manually-entered commands below that are part of this lab are equivalent to <code>L3LS_s1-leaf4_complete</code>.</p> <ol> <li> <p>Log into the LabAccess jumpserver:</p> <ol> <li>Type <code>l3ls</code> at the prompt. The script will configure the  datacenter with the exception of s1-leaf4.</li> </ol> Note <p>Did you know the \"l3ls\" script is composed of Python code that uses the CloudVision Portal REST API to automate the provisioning of CVP Configlets. The configlets that are configured via the REST API are <code>L3LS_s1-spine1</code>, <code>L3LS_s1-spine2</code>, <code>L3LS_s1-leaf1</code>, <code>L3LS_s1-leaf2</code>, <code>L3LS_s1-leaf3</code>, <code>L3LS_s1-leaf4</code>.</p> </li> <li> <p>Configure SVI and VARP Virtual IP on the s1-leaf4 switch using     the following criteria</p> <ol> <li> <p>Create the vARP MAC Address in Global Configuration mode</p> Note <p>Arista EOS utilizes the Industry-Standard CLI. When entering configuration commands, be sure to first type <code>configure</code> to enter configuration mode.</p> <pre><code>ip virtual-router mac-address 00:1c:73:00:00:34\n</code></pre> </li> <li> <p>Create the VLAN, SVI and the Virtual Router Address</p> <pre><code>vlan 134\n    name Host_Network_134\n!\ninterface vlan 134\n    ip address 10.111.134.3/24\n    ip virtual-router address 10.111.134.1\n</code></pre> </li> <li> <p>Validate the configuration with the following:</p> <pre><code>s1-leaf4#show ip interface brief \n                                                                               Address\nInterface         IP Address            Status       Protocol           MTU    Owner  \n----------------- --------------------- ------------ -------------- ---------- -------\nManagement0       192.168.0.15/24       up           up                1500           \nVlan134           10.111.134.3/24       up           up                1500           \nVlan4094          10.255.255.2/30       up           up                1500           \n\ns1-leaf4#show ip virtual-router\nIP virtual router is configured with MAC address: 001c.7300.0034\nIP virtual router address subnet routes not enabled\nMAC address advertisement interval: 30 seconds\n\nProtocol: U - Up, D - Down, T - Testing, UN - Unknown\n         NP - Not Present, LLD - Lower Layer Down\n\nInterface       Vrf           Virtual IP Address       Protocol       State \n--------------- ------------- ------------------------ -------------- ------\nVl134           default       10.111.134.1             U              active\n</code></pre> </li> </ol> </li> <li> <p>Configure BGP on the s1-leaf4 switch using the following     criteria</p> <ol> <li> <p>Based on the diagram, configure L3 interfaces to     s1-spine1/s1-spine2 and interface Loopback0</p> <pre><code>interface Ethernet2\n    description L3 Uplink - s1-spine1\n    no switchport\n    ip address 10.111.1.7/31\n!\ninterface Ethernet3\n    description L3 Uplink - s1-spine2\n    no switchport\n    ip address 10.111.2.7/31\n!\ninterface Loopback0\n    description Management and Router-id\n    ip address 10.111.254.4/32\n</code></pre> </li> <li> <p>Validate the configuration with the following:</p> <pre><code>s1-leaf4#show ip interface brief\n                                                                              Address\nInterface         IP Address            Status       Protocol            MTU    Owner  \n----------------- --------------------- ------------ -------------- ----------- -------\nEthernet2         10.111.1.7/31         up           up                 1500           \nEthernet3         10.111.2.7/31         up           up                 1500           \nLoopback0         10.111.254.4/32       up           up                65535           \nManagement0       192.168.0.15/24       up           up                 1500           \nVlan134           10.111.134.3/24       up           up                 1500           \nVlan4094          10.255.255.2/30       up           up                 1500           \n</code></pre> </li> <li> <p>Based on the diagram, turn on BGP and configure the neighbor     relationships on s1-leaf4. eBGP to s1-spine1/s1-spine2     and iBGP to s1-leaf3.</p> Note <p>We are using a peer group to configure the neighbor attributes for the spines. This allows us to apply all bgp attributes within a group to each neighbor that is a member in a scalable method.</p> <pre><code>router bgp 65102\n   router-id 10.111.254.4\n   neighbor SPINE peer group\n   neighbor SPINE remote-as 65100\n   neighbor SPINE send-community standard extended\n   neighbor 10.111.1.6 peer group SPINE\n   neighbor 10.111.2.6 peer group SPINE\n   neighbor 10.255.255.1 remote-as 65102\n   neighbor 10.255.255.1 next-hop-self\n</code></pre> Note <p>Since <code>neighbor 10.255.255.1 remote-as 65102</code> specifies an iBGP peering relationship (because the ASN is the same as this switch <code>65102</code>), the receiving switch may not have a route to networks more than 1 hop away, hence the switches should each advertise that they are the next hop via the <code>neighbor 10.255.255.1 next-hop-self</code> statement. While this scenario is only 2 iBGP peers, in a network fabric with several iBGP peers, a switch inside an AS (and not on an edge) may not have a route to a switch in any external AS.</p> </li> <li> <p>Validate the configuration and neighbor establishment</p> <pre><code>s1-leaf4(config-router-bgp)#show active\nrouter bgp 65102\n   router-id 10.111.254.4\n   neighbor SPINE peer group\n   neighbor SPINE remote-as 65100\n   neighbor SPINE send-community standard extended\n   neighbor 10.111.1.6 peer group SPINE\n   neighbor 10.111.2.6 peer group SPINE\n   neighbor 10.255.255.1 remote-as 65102\n   neighbor 10.255.255.1 next-hop-self\ns1-leaf4(config-router-bgp)#show ip bgp summary\nBGP summary information for VRF default\nRouter identifier 10.111.254.4, local AS number 65102\nNeighbor Status Codes: m - Under maintenance\nNeighbor     V AS           MsgRcvd   MsgSent  InQ OutQ  Up/Down State   PfxRcd PfxAcc\n10.111.1.6   4 65100             10         8    0    0 00:01:02 Estab   5      5\n10.111.2.6   4 65100              9         9    0    0 00:01:02 Estab   5      5\n10.255.255.1 4 65102              9         8    0    0 00:01:00 Estab   9      9\n</code></pre> </li> </ol> </li> <li> <p>Configure networks on s1-leaf4 to advertise to     s1-spine1/s1-spine2</p> <ol> <li> <p>Add the following networks to BGP announcements on s1-leaf4:</p> <pre><code>router bgp 65102\n   network 10.111.134.0/24\n   network 10.111.254.4/32\n</code></pre> </li> <li> <p>Verify that these networks are being advertised to the other     Spines and Leafs</p> <pre><code>s1-leaf1#show ip route\n\n   VRF: default\n   Codes: C - connected, S - static, K - kernel, \n         O - OSPF, IA - OSPF inter area, E1 - OSPF external type 1,\n         E2 - OSPF external type 2, N1 - OSPF NSSA external type 1,\n         N2 - OSPF NSSA external type2, B - Other BGP Routes,\n         B I - iBGP, B E - eBGP, R - RIP, I L1 - IS-IS level 1,\n         I L2 - IS-IS level 2, O3 - OSPFv3, A B - BGP Aggregate,\n         A O - OSPF Summary, NG - Nexthop Group Static Route,\n         V - VXLAN Control Service, M - Martian,\n         DH - DHCP client installed default route,\n         DP - Dynamic Policy Route, L - VRF Leaked,\n         G  - gRIBI, RC - Route Cache Route\n\n   Gateway of last resort is not set\n\n   B E      10.111.0.1/32 [200/0] via 10.111.1.0, Ethernet2\n   B E      10.111.0.2/32 [200/0] via 10.111.2.0, Ethernet3\n   C        10.111.1.0/31 is directly connected, Ethernet2\n   B E      10.111.1.0/24 [200/0] via 10.111.1.0, Ethernet2\n   C        10.111.2.0/31 is directly connected, Ethernet3\n   B E      10.111.2.0/24 [200/0] via 10.111.2.0, Ethernet3\n   C        10.111.112.0/24 is directly connected, Vlan112\n   B E      10.111.134.0/24 [200/0] via 10.111.1.0, Ethernet2\n   C        10.111.254.1/32 is directly connected, Loopback0\n   B I      10.111.254.2/32 [200/0] via 10.255.255.2, Vlan4094\n   B E      10.111.254.3/32 [200/0] via 10.111.1.0, Ethernet2\n   B E      10.111.254.4/32 [200/0] via 10.111.1.0, Ethernet2\n   C        10.255.255.0/30 is directly connected, Vlan4094\n   C        192.168.0.0/24 is directly connected, Management0\n\n   s1-leaf1#show ip bgp\n   BGP routing table information for VRF default\n   Router identifier 10.111.254.1, local AS number 65101\n   Route status codes: s - suppressed, * - valid, &gt; - active, E - ECMP head, e - ECMP\n                     S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast\n                     % - Pending BGP convergence\n   Origin codes: i - IGP, e - EGP, ? - incomplete\n   RPKI Origin Validation codes: V - valid, I - invalid, U - unknown\n   AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop\n\n            Network                Next Hop              Metric  AIGP       LocPref Weight  Path\n   * &gt;      10.111.0.1/32          10.111.1.0            0       -          100     0       65100 i\n   *        10.111.0.1/32          10.255.255.2          0       -          100     0       65100 i\n   * &gt;      10.111.0.2/32          10.111.2.0            0       -          100     0       65100 i\n   *        10.111.0.2/32          10.255.255.2          0       -          100     0       65100 i\n   * &gt;      10.111.1.0/24          10.111.1.0            0       -          100     0       65100 ?\n   *        10.111.1.0/24          10.255.255.2          0       -          100     0       65100 ?\n   * &gt;      10.111.2.0/24          10.111.2.0            0       -          100     0       65100 ?\n   *        10.111.2.0/24          10.255.255.2          0       -          100     0       65100 ?\n   * &gt;      10.111.112.0/24        -                     -       -          -       0       i\n   *        10.111.112.0/24        10.255.255.2          0       -          100     0       i\n   * &gt;      10.111.134.0/24        10.111.1.0            0       -          100     0       65100 65102 i\n   *        10.111.134.0/24        10.111.2.0            0       -          100     0       65100 65102 i\n   *        10.111.134.0/24        10.255.255.2          0       -          100     0       65100 65102 i\n   * &gt;      10.111.254.1/32        -                     -       -          -       0       i\n   * &gt;      10.111.254.2/32        10.255.255.2          0       -          100     0       i\n   * &gt;      10.111.254.3/32        10.111.1.0            0       -          100     0       65100 65102 i\n   *        10.111.254.3/32        10.111.2.0            0       -          100     0       65100 65102 i\n   *        10.111.254.3/32        10.255.255.2          0       -          100     0       65100 65102 i\n   * &gt;      10.111.254.4/32        10.111.1.0            0       -          100     0       65100 65102 i\n   *        10.111.254.4/32        10.111.2.0            0       -          100     0       65100 65102 i\n   *        10.111.254.4/32        10.255.255.2          0       -          100     0       65100 65102 i\n\n   s1-leaf1#show ip route bgp\n\n   VRF: default\n   Codes: C - connected, S - static, K - kernel, \n         O - OSPF, IA - OSPF inter area, E1 - OSPF external type 1,\n         E2 - OSPF external type 2, N1 - OSPF NSSA external type 1,\n         N2 - OSPF NSSA external type2, B - Other BGP Routes,\n         B I - iBGP, B E - eBGP, R - RIP, I L1 - IS-IS level 1,\n         I L2 - IS-IS level 2, O3 - OSPFv3, A B - BGP Aggregate,\n         A O - OSPF Summary, NG - Nexthop Group Static Route,\n         V - VXLAN Control Service, M - Martian,\n         DH - DHCP client installed default route,\n         DP - Dynamic Policy Route, L - VRF Leaked,\n         G  - gRIBI, RC - Route Cache Route\n\n   B E      10.111.0.1/32 [200/0] via 10.111.1.0, Ethernet2\n   B E      10.111.0.2/32 [200/0] via 10.111.2.0, Ethernet3\n   B E      10.111.1.0/24 [200/0] via 10.111.1.0, Ethernet2\n   B E      10.111.2.0/24 [200/0] via 10.111.2.0, Ethernet3\n   B E      10.111.134.0/24 [200/0] via 10.111.1.0, Ethernet2\n   B I      10.111.254.2/32 [200/0] via 10.255.255.2, Vlan4094\n   B E      10.111.254.3/32 [200/0] via 10.111.1.0, Ethernet2\n   B E      10.111.254.4/32 [200/0] via 10.111.1.0, Ethernet2\n</code></pre> </li> <li> <p>Add in multiple paths by enabling ECMP, on s1-leaf4, jump     into BGP configuration mode and add:</p> <pre><code>router bgp 65102\n   maximum-paths 2\n</code></pre> </li> <li> <p>Check the BGP and IP route tables on s1-leaf4 as well as     each of the Spines and Leafs</p> <pre><code>s1-spine1#show ip route\n\n   VRF: default\n   Codes: C - connected, S - static, K - kernel, \n         O - OSPF, IA - OSPF inter area, E1 - OSPF external type 1,\n         E2 - OSPF external type 2, N1 - OSPF NSSA external type 1,\n         N2 - OSPF NSSA external type2, B - Other BGP Routes,\n         B I - iBGP, B E - eBGP, R - RIP, I L1 - IS-IS level 1,\n         I L2 - IS-IS level 2, O3 - OSPFv3, A B - BGP Aggregate,\n         A O - OSPF Summary, NG - Nexthop Group Static Route,\n         V - VXLAN Control Service, M - Martian,\n         DH - DHCP client installed default route,\n         DP - Dynamic Policy Route, L - VRF Leaked,\n         G  - gRIBI, RC - Route Cache Route\n\n   Gateway of last resort is not set\n\n   C        10.111.0.1/32 is directly connected, Loopback0\n   C        10.111.1.0/31 is directly connected, Ethernet2\n   C        10.111.1.2/31 is directly connected, Ethernet3\n   C        10.111.1.4/31 is directly connected, Ethernet4\n   C        10.111.1.6/31 is directly connected, Ethernet5\n   S        10.111.1.0/24 is directly connected, Null0\n   B E      10.111.112.0/24 [200/0] via 10.111.1.1, Ethernet2\n                                    via 10.111.1.3, Ethernet3\n   B E      10.111.134.0/24 [200/0] via 10.111.1.5, Ethernet4\n                                    via 10.111.1.7, Ethernet5\n   B E      10.111.254.1/32 [200/0] via 10.111.1.1, Ethernet2\n                                    via 10.111.1.3, Ethernet3\n   B E      10.111.254.2/32 [200/0] via 10.111.1.1, Ethernet2\n                                    via 10.111.1.3, Ethernet3\n   B E      10.111.254.3/32 [200/0] via 10.111.1.5, Ethernet4\n                                    via 10.111.1.7, Ethernet5\n   B E      10.111.254.4/32 [200/0] via 10.111.1.5, Ethernet4\n                                    via 10.111.1.7, Ethernet5\n   C        192.168.0.0/24 is directly connected, Management0\n\n   s1-spine1#show ip bgp\n   BGP routing table information for VRF default\n   Router identifier 10.111.0.1, local AS number 65100\n   Route status codes: s - suppressed, * - valid, &gt; - active, E - ECMP head, e - ECMP\n                     S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast\n                     % - Pending BGP convergence\n   Origin codes: i - IGP, e - EGP, ? - incomplete\n   RPKI Origin Validation codes: V - valid, I - invalid, U - unknown\n   AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop\n\n            Network                Next Hop              Metric  AIGP       LocPref Weight  Path\n   * &gt;      10.111.0.1/32          -                     -       -          -       0       i\n   * &gt;      10.111.1.0/24          -                     -       -          -       0       ?\n   * &gt;Ec    10.111.112.0/24        10.111.1.1            0       -          100     0       65101 i\n   *  ec    10.111.112.0/24        10.111.1.3            0       -          100     0       65101 i\n   * &gt;Ec    10.111.134.0/24        10.111.1.5            0       -          100     0       65102 i\n   *  ec    10.111.134.0/24        10.111.1.7            0       -          100     0       65102 i\n   * &gt;Ec    10.111.254.1/32        10.111.1.1            0       -          100     0       65101 i\n   *  ec    10.111.254.1/32        10.111.1.3            0       -          100     0       65101 i\n   * &gt;Ec    10.111.254.2/32        10.111.1.3            0       -          100     0       65101 i\n   *  ec    10.111.254.2/32        10.111.1.1            0       -          100     0       65101 i\n   * &gt;Ec    10.111.254.3/32        10.111.1.5            0       -          100     0       65102 i\n   *  ec    10.111.254.3/32        10.111.1.7            0       -          100     0       65102 i\n   * &gt;Ec    10.111.254.4/32        10.111.1.7            0       -          100     0       65102 i\n   *  ec    10.111.254.4/32        10.111.1.5            0       -          100     0       65102 i\n\n   s1-spine1#sh ip route bgp\n\n   VRF: default\n   Codes: C - connected, S - static, K - kernel, \n         O - OSPF, IA - OSPF inter area, E1 - OSPF external type 1,\n         E2 - OSPF external type 2, N1 - OSPF NSSA external type 1,\n         N2 - OSPF NSSA external type2, B - Other BGP Routes,\n         B I - iBGP, B E - eBGP, R - RIP, I L1 - IS-IS level 1,\n         I L2 - IS-IS level 2, O3 - OSPFv3, A B - BGP Aggregate,\n         A O - OSPF Summary, NG - Nexthop Group Static Route,\n         V - VXLAN Control Service, M - Martian,\n         DH - DHCP client installed default route,\n         DP - Dynamic Policy Route, L - VRF Leaked,\n         G  - gRIBI, RC - Route Cache Route\n\n   B E      10.111.112.0/24 [200/0] via 10.111.1.1, Ethernet2\n                                    via 10.111.1.3, Ethernet3\n   B E      10.111.134.0/24 [200/0] via 10.111.1.5, Ethernet4\n                                    via 10.111.1.7, Ethernet5\n   B E      10.111.254.1/32 [200/0] via 10.111.1.1, Ethernet2\n                                    via 10.111.1.3, Ethernet3\n   B E      10.111.254.2/32 [200/0] via 10.111.1.1, Ethernet2\n                                    via 10.111.1.3, Ethernet3\n   B E      10.111.254.3/32 [200/0] via 10.111.1.5, Ethernet4\n                                    via 10.111.1.7, Ethernet5\n   B E      10.111.254.4/32 [200/0] via 10.111.1.5, Ethernet4\n                                    via 10.111.1.7, Ethernet5\n</code></pre> Note <p>ECMP is now working - notice the new status code in the show ip bgp output on s1-leaf4</p> </li> </ol> </li> <li> <p>Validate connectivity from s1-host1 to s1-host2. From     s1-host1 execute:</p> <pre><code>ping 10.111.134.202\ntraceroute 10.111.134.202\n</code></pre> <ol> <li> <p>Verify s1-leaf4\\'s IP address is in the traceroute path,     either interface 10.111.1.7 via s1-spine1 or interface     10.111.2.7 via s1-spine2. If traffic is hashing via     s1-leaf3\\'s 10.111.1.5 or 10.111.2.5 interfaces perform the     optional <code>shutdown</code> steps below on s1-leaf3</p> <pre><code>router bgp 65102\n   neighbor 10.111.1.4 shutdown\n   neighbor 10.111.2.4 shutdown\n</code></pre> </li> <li> <p>Rerun traceroute/verification from s1-host1 to s1-host2     then revert the <code>shutdown</code> changes on s1-leaf3</p> <pre><code>router bgp 65102\n   no neighbor 10.111.1.4 shutdown\n   no neighbor 10.111.2.4 shutdown\n</code></pre> </li> </ol> </li> <li> <p>Other BGP features to play with if you have time:</p> <ol> <li> <p>Route Redistribution: For fun, do a     <code>watch 1 diff show ip route | begin Gateway</code> on s1-leaf1 &amp;     s1-leaf2 and let those run while you execute the command     <code>redistribute connected</code> below on s1-leaf3. You will see new     routes being injected into the route tables of s1-leaf1 &amp;     s1-leaf2.</p> <pre><code>router bgp 65102\n   redistribute connected\n</code></pre> </li> <li> <p>Route Maps and Prefix-Lists: Below is an example of some basic     Prefix-Lists and Route-Maps that can be used for BGP filtering.     Note that this is just an example and will not impact route     advertisement in the lab.</p> <pre><code>&lt;Example&gt;\n\nip prefix-list BOGON-Prefixes seq 10 permit 10.0.0.0/8\nip prefix-list BOGON-Prefixes seq 20 permit 172.16.0.0/12\nip prefix-list BOGON-Prefixes seq 30 permit 192.168.0.0/16\n!\nroute-map BOGONS permit 10\n   match ip address prefix-list BOGON-Prefixes\n!\nroute-map BOGONS deny 20\n!\nroute-map InboundSP1 deny 10\n   sub-route-map BOGONS\n!\nroute-map InboundSP1 permit 20\n   set local-preference 200\n!\nrouter bgp 65102\n   neighbor UpstreamSP1 route-map InboundSP1 in\n</code></pre> </li> <li> <p>BFD: BFD is a low-overhead, protocol-independent mechanism which     adjacent systems can use instead for faster detection of faults     in the path between them. BFD is a simple mechanism which     detects the liveness of a connection between adjacent systems,     allowing it to quickly detect failure of any element in the     connection. Note that BFD is not running on the other devices so     the BFD neighbor will not come up.</p> <pre><code>router bgp 65102\n   neighbor &lt;neighbor_ip&gt; bfd\n</code></pre> </li> </ol> </li> <li> <p>Troubleshooting BGP:</p> <pre><code>show ip bgp summary\nshow ip bgp\nshow ip bgp neighbor &lt;neighbor_ip&gt;\nshow run section bgp\nshow log\n</code></pre> </li> </ol> <p>LAB COMPLETE!</p>"},{"location":"eos_configuration/vxlan/","title":"VxLAN","text":"Note <p>Did you know the <code>vxlan</code> script is composed of Python code that uses the CloudVision Portal REST API to automate the provisioning of CVP configlets. The configlets that are configured via the REST API are <code>VXLAN_s1-spine1</code>, <code>VXLAN_s1-spine2</code>, <code>VXLAN_s1-leaf1</code>, <code>VXLAN_s1-leaf2</code>, <code>VXLAN_s1-leaf3</code>, <code>VXLAN_s1-leaf4</code>. In addition each leaf also gets the <code>VLANs</code> configlet.</p> <p>The manually-entered commands below that are part of this lab are equivalent to <code>VXLAN_s1-leaf4_complete</code></p> <ol> <li> <p>Log into the LabAccess jumpserver:</p> <ol> <li>Type <code>vxlan</code> at the prompt. The script will configure the     datacenter with the exception of s1-leaf4.</li> </ol> </li> <li> <p>On s1-leaf4, configure Port-channels connecting to s1-host2</p> <pre><code>configure\ninterface port-channel 5\n    description MLAG - HOST2\n    switchport access vlan 112\n    mlag 5\n\ninterface Ethernet4\n    description HOST2\n    channel-group 5 mode active\n    lacp timer fast\n</code></pre> </li> <li> <p>Verify MLAG on s1-leaf4</p> <pre><code>s1-leaf4(config)#show mlag\nMLAG Configuration:\ndomain-id                          :                MLAG\nlocal-interface                    :            Vlan4094\npeer-address                       :        10.255.255.1\npeer-link                          :       Port-Channel1\npeer-config                        :        inconsistent\n\nMLAG Status:\nstate                              :              Active\nnegotiation status                 :           Connected\npeer-link status                   :                  Up\nlocal-int status                   :                  Up\nsystem-id                          :   02:1c:73:c0:c6:14\ndual-primary detection             :            Disabled\ndual-primary interface errdisabled :               False\n\nMLAG Ports:\nDisabled                           :                   0\nConfigured                         :                   0\nInactive                           :                   0\nActive-partial                     :                   0\nActive-full                        :                   1\n\ns1-leaf4(config)#show mlag interfaces\n                                                                 local/remote\n   mlag       desc             state       local       remote          status\n---------- ---------- ----------------- ----------- ------------ ------------\n      5       MLAG - HOST2        active-full         Po5          Po5           up/up\n\ns1-leaf4(config)#show port-channel dense\n\n        Flags\n-------------------------- ----------------------------- -------------------------\n   a - LACP Active            p - LACP Passive           * - static fallback\n   F - Fallback enabled       f - Fallback configured    ^ - individual fallback\n   U - In Use                 D - Down\n   + - In-Sync                - - Out-of-Sync            i - incompatible with agg\n   P - bundled in Po          s - suspended              G - Aggregable\n   I - Individual             S - ShortTimeout           w - wait for agg\n   E - Inactive. The number of configured port channels exceeds the config limit\n   M - Exceeds maximum weight\n\nNumber of channels in use: 2\nNumber of aggregators: 2\n\n   Port-Channel       Protocol    Ports\n------------------ -------------- ------------------\n   Po1(U)             LACP(a)     Et1(PG+) Et6(PG+)\n   Po5(U)             LACP(a)     Et4(PSG+) PEt4(P)\n</code></pre> </li> <li> <p>Validate BGP operation s1-leaf4</p> <pre><code>s1-leaf4(config)#sh run sec bgp\n   router bgp 65102\n   router-id 10.111.254.4\n   maximum-paths 2\n   neighbor SPINE peer group\n   neighbor SPINE remote-as 65100\n   neighbor SPINE send-community standard extended\n   neighbor 10.111.1.6 peer group SPINE\n   neighbor 10.111.2.6 peer group SPINE\n   neighbor 10.255.255.1 remote-as 65102\n   neighbor 10.255.255.1 next-hop-self\n   network 10.111.112.0/24\n   network 10.111.134.0/24\n   network 10.111.254.4/32\n\ns1-leaf4(config)#show ip route bgp\n\nVRF: default\nCodes: C - connected, S - static, K - kernel,\n       O - OSPF, IA - OSPF inter area, E1 - OSPF external type 1,\n       E2 - OSPF external type 2, N1 - OSPF NSSA external type 1,\n       N2 - OSPF NSSA external type2, B - Other BGP Routes,\n       B I - iBGP, B E - eBGP, R - RIP, I L1 - IS-IS level 1,\n       I L2 - IS-IS level 2, O3 - OSPFv3, A B - BGP Aggregate,\n       A O - OSPF Summary, NG - Nexthop Group Static Route,\n       V - VXLAN Control Service, M - Martian,\n       DH - DHCP client installed default route,\n       DP - Dynamic Policy Route, L - VRF Leaked,\n       G  - gRIBI, RC - Route Cache Route\n\n B E      10.111.0.1/32 [200/0] via 10.111.1.6, Ethernet2\n B E      10.111.0.2/32 [200/0] via 10.111.2.6, Ethernet3\n B E      10.111.1.0/24 [200/0] via 10.111.1.6, Ethernet2\n B E      10.111.2.0/24 [200/0] via 10.111.2.6, Ethernet3\n B E      10.111.253.1/32 [200/0] via 10.111.1.6, Ethernet2\n                           via 10.111.2.6, Ethernet3\n B I      10.111.253.3/32 [200/0] via 10.255.255.1, Vlan4094\n B E      10.111.254.1/32 [200/0] via 10.111.1.6, Ethernet2\n                           via 10.111.2.6, Ethernet3\n B E      10.111.254.2/32 [200/0] via 10.111.1.6, Ethernet2\n                           via 10.111.2.6, Ethernet3\n B I      10.111.254.3/32 [200/0] via 10.255.255.1, Vlan4094        \n\ns1-leaf4(config)#show ip interface brief\n                                                                                Address\nInterface         IP Address            Status       Protocol            MTU    Owner\n----------------- --------------------- ------------ -------------- ----------- -------\nEthernet2         10.111.1.7/31         up           up                 1500\nEthernet3         10.111.2.7/31         up           up                 1500\nLoopback0         10.111.254.4/32       up           up                65535\nManagement0       192.168.0.15/24       up           up                 1500\nVlan112           10.111.112.1/24       up           up                 1500\nVlan134           10.111.134.1/24       up           up                 1500\nVlan4094          10.255.255.2/30       up           up                 1500\n\ns1-leaf4(config)#show ip bgp summary\nBGP summary information for VRF default\nRouter identifier 10.111.254.4, local AS number 65102\nNeighbor Status Codes: m - Under maintenance\n  Neighbor     V AS           MsgRcvd   MsgSent  InQ OutQ  Up/Down State   PfxRcd PfxAcc\n  10.111.1.6   4 65100            333       335    0    0 04:34:48 Estab   5      5\n  10.111.2.6   4 65100            329       332    0    0 04:34:58 Estab   6      6\n  10.255.255.1 4 65102            335       333    0    0 04:34:46 Estab   11     11\n</code></pre> Note <p><code>show ip bgp summary</code> will show that the BGP neighbors have moved to <code>Estab</code> state. Note the iBGP peering between Leaf3 &amp; Leaf4. Also note the route to the shared loopback1 of Leaf1 &amp; Leaf2. This is the remote VTEP on the other side of the leaf-spine network.</p> </li> <li> <p>Create Loopback 1 and the VXLAN VTEP (VTI) interfaces on     s1-leaf4</p> <ol> <li> <p>Configuration</p> <pre><code>configure\ninterface Loopback1\n  ip address 10.111.253.3/32\n\ninterface vxlan 1\n  vxlan source-interface loopback 1\n  vxlan vlan 112 vni 112\n  vxlan flood vtep 10.111.253.1 \n</code></pre> Note <p><code>vxlan flood vtep 10.111.253.1</code> adds the shared loopback1 IP address on Leaf1 &amp; Leaf2 to the HER list. Note that for autodiscovery of VTEPs, one must use BGP eVPN (see eVPN labs) or CVX (see CVX lab).</p> </li> <li> <p>Verification</p> <pre><code>s1-leaf4(config)#show run int vxlan1\ninterface Vxlan1\nvxlan source-interface Loopback1\nvxlan udp-port 4789\nvxlan vlan 112 vni 112\nvxlan flood vtep 10.111.253.1\n\ns1-leaf4(config-if-Vx1)#sh int vxlan 1\nVxlan1 is up, line protocol is up (connected)\nHardware is Vxlan\nSource interface is Loopback1 and is active with 10.111.253.3\nReplication/Flood Mode is headend with Flood List Source: CLI\nRemote MAC learning via Datapath\nVNI mapping to VLANs\nStatic VLAN to VNI mapping is\n    [12, 112]\nNote: All Dynamic VLANs used by VCS are internal VLANs.\n        Use 'show vxlan vni' for details.\nStatic VRF to VNI mapping is not configured\nHeadend replication flood vtep list is:\n    12 10.111.253.1\nMLAG Shared Router MAC is 0000.0000.0000\n</code></pre> </li> </ol> </li> <li> <p>Log into s1-host1 and s1-host2, ping the vARP VIP and the     other host</p> <ol> <li> <p>Host 1 ping tests. From s1-host1:</p> <pre><code>ping 10.111.112.1\nping 10.111.112.202\n</code></pre> Note <p>The TTL in the ping outputs above. Even though .202 is many switches away, it appears locally connected and has the same TTL as the ping to .1. It\\'s also interesting to realize that due to MLAG hashing of both the ARP requests and ping packet flows that pings to the SVI addresses of .2 &amp; .3 may or may not work. Do you know why?</p> </li> <li> <p>Host 1 MAC/ARP information</p> <pre><code>s1-host1#show interfaces po1 | grep -i Hardware\n  Hardware is Port-Channel, address is 001c.73c0.c616\n\ns1-host1#show arp\nAddress         Age (sec)  Hardware Addr   Interface\n192.168.0.1       0:00:00  124e.b1e1.7180  Management0\n192.168.0.5       0:00:05  001c.73a0.c601  Management0\n10.111.112.1      0:38:05  001c.7300.0001  Port-Channel1\n10.111.112.202    0:14:05  001c.73c0.c617  Port-Channel1\n</code></pre> Note <p>Note the MAC addresses returned by the commands above.</p> </li> <li> <p>Host 2 ping tests. From s1-host2:</p> <pre><code>ping 10.111.112.1\nping 10.111.112.201\n</code></pre> Note <p>Note the TTL in the ping outputs above. Even though .201 is many switches away, it appears locally connected and has the same TTL as the ping to .1. Also note that the vARP VIP (10.111.112.1) address &amp; and vARP MAC address (00:1c:73:00:00:ff) are the same for both leaf pairs - this IP address is known as an AnyCast IP address. If a VM was motioning from s1-host1 to s1-host2 for maintenance, the default GW address nor the ARP cache on that VM need to change.</p> </li> <li> <p>Host 2 MAC/ARP information</p> <pre><code>show interface po1 | grep -i Hardware\nshow arp\n</code></pre> Note <p>Note the MAC addresses returned by the commands above and compare to the prior <code>grep</code> and <code>arp</code> commands and see that both hosts appear to each other as though they are on the same L2 broadcast domain. For a little extra fun, as you are running the pings from host1, on another set of windows for s1-leaf1 &amp; s1-leaf2 run <code>clear counters</code> then run <code>watch 1 diff show int e4 counter</code> and see how MLAG hashing across the different pings causes the packets to choose a particular member of the port-channel in both the outbound &amp; inbound ping flows.</p> </li> </ol> </li> <li> <p>Verification -- on s1-leaf1/2 and s1-leaf3/4</p> <ol> <li> <p>Verify the MAC addresses and the associated VTEP IP</p> <pre><code>s1-leaf1#show vxlan vtep\nRemote VTEPS for Vxlan1:\n\nVTEP               Tunnel Type(s)\n------------------ --------------\n10.111.253.3       unicast, flood\n\nTotal number of remote VTEPS:  1\n\ns1-leaf1#show vxlan address-table\nVxlan Mac Address Table\n----------------------------------------------------------------------\n\nVLAN  Mac Address     Type      Prt  VTEP             Moves   Last Move\n----  -----------     ----      ---  ----             -----   ---------\n 112  001c.73c0.c617  DYNAMIC   Vx1  10.111.253.3     1       0:01:13 ago\nTotal Remote Mac Addresses for this criterion: 1\n</code></pre> <pre><code>s1-leaf4(config)#show vxlan vtep\nRemote VTEPS for Vxlan1:\n\nVTEP               Tunnel Type(s)\n------------------ --------------\n10.111.253.1       unicast, flood\n\nTotal number of remote VTEPS:  1\n\ns1-leaf4(config)#show vxlan address-table\n         Vxlan Mac Address Table\n----------------------------------------------------------------------\n\nVLAN  Mac Address     Type      Prt  VTEP             Moves   Last Move\n----  -----------     ----      ---  ----             -----   ---------\n112  001c.73c0.c616  DYNAMIC   Vx1  10.111.253.1     1       0:00:33 ago\nTotal Remote Mac Addresses for this criterion: 1\n</code></pre> Note <p>For <code>show vxlan vtep</code> &amp; <code>show vxlan address-table</code> to be populated, the above <code>pings</code> need to have been active very recently so that the MAC addresses don\\'t age out, and you\\'ll notice that at least 1 (but not necessarily both) of the MLAG pair switches (s1-leaf1 or s1-leaf2) will have knowledge of the remote VTEP. This is because this is the direction the pings (inbound &amp; outbound) last hashed.</p> </li> <li> <p>Verify the MAC address and the associated interface</p> <pre><code>show mac address-table\n</code></pre> </li> </ol> </li> <li> <p>Let's run some other show commands and tests to poke around VxLAN.     On s1-leaf1 and s1-leaf4 issue the following commands:</p> <pre><code>show interface vxlan 1\nshow mac address-table\nshow log\n</code></pre> </li> </ol> <p>LAB COMPLETE!</p>"},{"location":"programmability/programmability_connecting/","title":"Connecting to your lab machine","text":"<p>1. Before we begin, let\\'s reset the environment to clear out previous lab changes. If the environment was brought up fresh and you are starting from this point, you can skip step #1.</p> <p>SSH to the public address assigned to the LabAccess jumphost server (this is the Topology Address shown in the \\\"Welcome to Arista\\'s Test Drive!\\\" picture above). The username is <code>arista</code> and the password is <code>{REPLACE_PWD}</code>:</p> <pre><code>ssh arista@{unique_address}.topo.testdrive.arista.com\n</code></pre> <p>| </p> <p>You will be greeted with the following menu:</p> <p></p> <p>| </p> <p>Select option 1 (Reset All Devices to Base ATD), wait til the command has completed, then log out.</p> <p>| </p> <p>2. Now we need to make sure that you can access your handy lab machine! You should have received your login information (a URL) from your friendly Arista SE already. If you have not, please reach out and ask for one.</p> <p>Once you receive your token, click on the link. You will greeted with a screen that looks like this:</p> <p></p> <p>| </p> <p>For these labs, we will be leveraging the Console Access, Programmability IDE and WebUI services. Connect to each of the service by clicking on the corresponding links on the left side. Each service will open in a new tab in your browser.</p> <p></p> <p>| </p> <p>To access each of the services, the credentials are listed on the Arista Test Drive Lab overview page in the Usernames and Passwords section.</p> <p>These services will be used to provide a ssh access to the lab, coding IDE, and a WebUI for the upcoming programmability labs.</p>"},{"location":"troubleshoot_training/tshoot_intro/","title":"Troubleshooting Introduction","text":"<p>:::: note ::: title Note :::</p> <p>A set of possible answers are available here. This hyperlink is only available to Arista employees. Please work with your Arista SE for access. ::::</p> <ol> <li>Log into the LabAccess jumpserver:<ol> <li>Type <code>labs</code> or option <code>97</code> at the Main Menu prompt. This will     bring up additional lab menu selections.</li> <li>Type <code>troubleshooting-labs</code> or option <code>4</code> at this prompt to open     the troubleshooting lab section (If you were previously in the     Troubleshooting Labs Menu, you can type <code>back</code> or option <code>97</code> to     go back).</li> <li>Type <code>tshoot-intro</code> or option <code>1</code> at the prompt. The script will     configure the lab into a errored set of states. It is up to you     to determine a solution for each of the questions below. There     can be many solutions, please work with your SE.</li> </ol> </li> <li>Questions<ol> <li>Why can't s1-Leaf1 ping s1-Host1? Are there multiple ways to fix     this?</li> <li>Why is s1-Leaf2 the spanning tree root for all VLANs?</li> <li>Why isn't 172.16.112.0/24 being advertised into BGP?</li> <li>Why won't the OSPF adjacency come up between Leaf1 &amp; Spine1?</li> </ol> </li> </ol>"}]}